<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅识spring aop流程</title>
    <link href="/2022/08/17/spring/spring-aop/"/>
    <url>/2022/08/17/spring/spring-aop/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Aop的引入"><a href="#1、Aop的引入" class="headerlink" title="1、Aop的引入"></a>1、Aop的引入</h1><blockquote><p>spring aop的创建是跟随spring ioc容器的创建而创建的</p></blockquote><h2 id="1-1、注解方式"><a href="#1-1、注解方式" class="headerlink" title="1.1、注解方式"></a>1.1、注解方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、配置文件开启aop自动代理<br><span class="hljs-comment">// 开启aop代理注册，通过该注解@Import了AspectJAutoProxyRegistrar类</span><br><span class="hljs-meta">@Import(AspectJAutoProxyRegistrar.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAspectJAutoProxy &#123;<br>    <span class="hljs-comment">//</span><br>&#125;<br><br><span class="hljs-number">2</span>、在ioc中注册AnnotationAwareAspectJAutoProxyCreator<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(</span><br><span class="hljs-params">AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;<br>    <span class="hljs-comment">//向BeanDefinitionRegistry(DefaultListableBeanFactoryy)注册bean定义信息</span><br>AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);<br><span class="hljs-comment">//</span><br>&#125;<br><br><span class="hljs-number">3</span>、判断是否注册bean信息<br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BeanDefinition <span class="hljs-title function_">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="hljs-params">(</span><br><span class="hljs-params">    BeanDefinitionRegistry registry, <span class="hljs-meta">@Nullable</span> Object source)</span> &#123;<br>    <span class="hljs-keyword">return</span> registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2、xml方式"><a href="#1-2、xml方式" class="headerlink" title="1.2、xml方式"></a>1.2、xml方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、AopNamespaceHandler<br>通过配置文件spring.handlers引入AopNamespaceHandler类<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AopNamespaceHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">NamespaceHandlerSupport</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">////</span><br>        <span class="hljs-comment">//引入aop自动代理类</span><br>registerBeanDefinitionParser(<span class="hljs-string">&quot;aspectj-autoproxy&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">AspectJAutoProxyBeanDefinitionParser</span>());<br><span class="hljs-comment">////</span><br>&#125;<br>&#125;  <br><br><span class="hljs-number">2</span>、AspectJAutoProxyBeanDefinitionParser注册aop核心类    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AspectJAutoProxyBeanDefinitionParser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanDefinitionParser</span> &#123;<br><span class="hljs-keyword">public</span> BeanDefinition <span class="hljs-title function_">parse</span><span class="hljs-params">(Element element, ParserContext parserContext)</span> &#123;<br> <br>        <span class="hljs-comment">//注册AspectJAnnotationAutoProxyCreator</span><br>        AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(parserContext, element);<br><br>&#125;<br>    <br><span class="hljs-number">3</span>、注册AnnotationAwareAspectJAutoProxyCreator类至ioc容器<br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BeanDefinition <span class="hljs-title function_">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="hljs-params">(</span><br><span class="hljs-params">        BeanDefinitionRegistry registry, <span class="hljs-meta">@Nullable</span> Object source)</span> &#123;<br><br>        <span class="hljs-keyword">return</span> registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="1-3、总结"><a href="#1-3、总结" class="headerlink" title="1.3、总结"></a>1.3、总结</h2><blockquote><p>不管是xml方式还是annotation方式，aop的核心最终都会归结于AnnotationAwareAspectJAutoProxyCreator类，此类是spring aop的核心类</p></blockquote><h1 id="2、Aop的加载"><a href="#2、Aop的加载" class="headerlink" title="2、Aop的加载"></a>2、Aop的加载</h1><blockquote><p>以annotation方式为例，最终通过@Import注解将spring核心类加入ioc容器，那么@Import注解是何时解析的呢</p></blockquote><h2 id="2-1、注册ConfigurationClassPostProcessor类"><a href="#2-1、注册ConfigurationClassPostProcessor类" class="headerlink" title="2.1、注册ConfigurationClassPostProcessor类"></a>2.1、注册ConfigurationClassPostProcessor类</h2><blockquote><p>注解方式中ConfigurationClassPostProcessor类是解析@Import的核心，同时也是@CompmentScan等注解的解析类</p></blockquote><h3 id="2-1-1、创建容器引入bean定义读取器"><a href="#2-1-1、创建容器引入bean定义读取器" class="headerlink" title="2.1.1、创建容器引入bean定义读取器"></a>2.1.1、创建容器引入bean定义读取器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1 创建容器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AnnotationConfigApplicationContext</span><span class="hljs-params">(Class&lt;?&gt;... componentClasses)</span> &#123;<br><span class="hljs-built_in">this</span>();<br>register(componentClasses);<br>refresh();<br>&#125;<br><span class="hljs-comment">// 2、this()方法，创建AnnotatedBeanDefinitionReader</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AnnotationConfigApplicationContext</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotatedBeanDefinitionReader</span>(<span class="hljs-built_in">this</span>);<br><span class="hljs-built_in">this</span>.scanner = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathBeanDefinitionScanner</span>(<span class="hljs-built_in">this</span>);<br>&#125;<br><br><span class="hljs-comment">// 3、创建AnnotatedBeanDefinitionReader类</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AnnotatedBeanDefinitionReader</span><span class="hljs-params">(BeanDefinitionRegistry registry, Environment environment)</span> &#123;<br>    Assert.notNull(registry, <span class="hljs-string">&quot;BeanDefinitionRegistry must not be null&quot;</span>);<br>    Assert.notNull(environment, <span class="hljs-string">&quot;Environment must not be null&quot;</span>);<br>    <span class="hljs-built_in">this</span>.registry = registry;<br>    <span class="hljs-built_in">this</span>.conditionEvaluator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionEvaluator</span>(registry, environment, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//注册注解配置类执行</span><br>    AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="hljs-built_in">this</span>.registry);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-2、注册ConfigurationClassPostProcessor类至beanFactory"><a href="#2-1-2、注册ConfigurationClassPostProcessor类至beanFactory" class="headerlink" title="2.1.2、注册ConfigurationClassPostProcessor类至beanFactory"></a>2.1.2、注册ConfigurationClassPostProcessor类至beanFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 4、注册方法重载</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerAnnotationConfigProcessors</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> &#123;<br>    registerAnnotationConfigProcessors(registry, <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-comment">// 5、注册实际方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;BeanDefinitionHolder&gt; <span class="hljs-title function_">registerAnnotationConfigProcessors</span><span class="hljs-params">(</span><br><span class="hljs-params">    BeanDefinitionRegistry registry, <span class="hljs-meta">@Nullable</span> Object source)</span> &#123;<br><br>    <span class="hljs-comment">// 其他代码忽略</span><br>...<br><br>    Set&lt;BeanDefinitionHolder&gt; beanDefs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(<span class="hljs-number">8</span>);<br><br>    <span class="hljs-comment">// 如果容器中不包含ConfigurationClassPostProcessor则加入容器</span><br>    <span class="hljs-keyword">if</span> (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;<br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">def</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(ConfigurationClassPostProcessor.class);<br>        def.setSource(source);<br>        beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME));<br>    &#125;<br>    <span class="hljs-comment">// 其他代码忽略</span><br>...<br>    <span class="hljs-keyword">return</span> beanDefs;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-3、ConfigurationClassPostProcessor的执行时间"><a href="#2-1-3、ConfigurationClassPostProcessor的执行时间" class="headerlink" title="2.1.3、ConfigurationClassPostProcessor的执行时间"></a>2.1.3、ConfigurationClassPostProcessor的执行时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 6、ConfigurationClassPostProcessor是一个BeanDefinitionRegistryPostProcessor，由ioc刷新的内容可知，该类的postProcessBeanDefinitionRegistry方法在invokeBeanFactoryPostProcessors()方法执行时调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanDefinitionRegistry</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">registryId</span> <span class="hljs-operator">=</span> System.identityHashCode(registry);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.registriesPostProcessed.contains(registryId)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br>            <span class="hljs-string">&quot;postProcessBeanDefinitionRegistry already called on this post-processor against &quot;</span> + registry);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.factoriesPostProcessed.contains(registryId)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br>            <span class="hljs-string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + registry);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.registriesPostProcessed.add(registryId);<br>    <span class="hljs-comment">// 执行注解读取与对应的bean注册</span><br>    processConfigBeanDefinitions(registry);<br>&#125;<br><br><span class="hljs-comment">// 7、解析配置类注解以及类定义注册</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processConfigBeanDefinitions</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> &#123;<br>    List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    <span class="hljs-comment">// 拿到所有类名，获取未解析的类</span><br>    String[] candidateNames = registry.getBeanDefinitionNames();<br><br>    <span class="hljs-keyword">for</span> (String beanName : candidateNames) &#123;<br>        <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDef</span> <span class="hljs-operator">=</span> registry.getBeanDefinition(beanName);<br>        <span class="hljs-comment">// 判断是否已经解析过了</span><br>        <span class="hljs-keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                logger.debug(<span class="hljs-string">&quot;Bean definition has already been processed as a configuration class: &quot;</span> + beanDef);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 未解析的保存</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="hljs-built_in">this</span>.metadataReaderFactory)) &#123;<br>            configCandidates.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionHolder</span>(beanDef, beanName));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Return immediately if no @Configuration classes were found</span><br>    <span class="hljs-keyword">if</span> (configCandidates.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Sort by previously determined @Order value, if applicable</span><br>    <span class="hljs-comment">// 排序</span><br>    configCandidates.sort((bd1, bd2) -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());<br>        <span class="hljs-keyword">return</span> Integer.compare(i1, i2);<br>    &#125;);<br><br>    <span class="hljs-comment">// Detect any custom bean name generation strategy supplied through the enclosing application context</span><br>    <span class="hljs-type">SingletonBeanRegistry</span> <span class="hljs-variable">sbr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (registry <span class="hljs-keyword">instanceof</span> SingletonBeanRegistry) &#123;<br>        sbr = (SingletonBeanRegistry) registry;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.localBeanNameGeneratorSet) &#123;<br>            <span class="hljs-type">BeanNameGenerator</span> <span class="hljs-variable">generator</span> <span class="hljs-operator">=</span> (BeanNameGenerator) sbr.getSingleton(<br>                AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR);<br>            <span class="hljs-keyword">if</span> (generator != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-built_in">this</span>.componentScanBeanNameGenerator = generator;<br>                <span class="hljs-built_in">this</span>.importBeanNameGenerator = generator;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.environment == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">this</span>.environment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEnvironment</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// Parse each @Configuration class</span><br>    <span class="hljs-comment">// 创建解析器，解析配置类</span><br>    <span class="hljs-type">ConfigurationClassParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationClassParser</span>(<br>        <span class="hljs-built_in">this</span>.metadataReaderFactory, <span class="hljs-built_in">this</span>.problemReporter, <span class="hljs-built_in">this</span>.environment,<br>        <span class="hljs-built_in">this</span>.resourceLoader, <span class="hljs-built_in">this</span>.componentScanBeanNameGenerator, registry);<br><br>    Set&lt;BeanDefinitionHolder&gt; candidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(configCandidates);<br>    Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(configCandidates.size());<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-comment">// 将对应的注解解析为bean定义</span><br>        parser.parse(candidates);<br>        parser.validate();<br><br>        Set&lt;ConfigurationClass&gt; configClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(parser.getConfigurationClasses());<br>        configClasses.removeAll(alreadyParsed);<br><br>        <span class="hljs-comment">// Read the model and create bean definitions based on its content</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.reader == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationClassBeanDefinitionReader</span>(<br>                registry, <span class="hljs-built_in">this</span>.sourceExtractor, <span class="hljs-built_in">this</span>.resourceLoader, <span class="hljs-built_in">this</span>.environment,<br>                <span class="hljs-built_in">this</span>.importBeanNameGenerator, parser.getImportRegistry());<br>        &#125;<br>        <span class="hljs-comment">// 加载上述解析出来的bean定义至容器中</span><br>        <span class="hljs-built_in">this</span>.reader.loadBeanDefinitions(configClasses);<br>        alreadyParsed.addAll(configClasses);<br><br>        candidates.clear();<br>        <span class="hljs-keyword">if</span> (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;<br>            String[] newCandidateNames = registry.getBeanDefinitionNames();<br>            Set&lt;String&gt; oldCandidateNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(Arrays.asList(candidateNames));<br>            Set&lt;String&gt; alreadyParsedClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (ConfigurationClass configurationClass : alreadyParsed) &#123;<br>                alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());<br>            &#125;<br>            <span class="hljs-keyword">for</span> (String candidateName : newCandidateNames) &#123;<br>                <span class="hljs-keyword">if</span> (!oldCandidateNames.contains(candidateName)) &#123;<br>                    <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> registry.getBeanDefinition(candidateName);<br>                    <span class="hljs-keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, <span class="hljs-built_in">this</span>.metadataReaderFactory) &amp;&amp;<br>                        !alreadyParsedClasses.contains(bd.getBeanClassName())) &#123;<br>                        candidates.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionHolder</span>(bd, candidateName));<br>                    &#125;<br>                &#125;<br>            &#125;<br>            candidateNames = newCandidateNames;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!candidates.isEmpty());<br><br>    <span class="hljs-comment">// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes</span><br>    <span class="hljs-keyword">if</span> (sbr != <span class="hljs-literal">null</span> &amp;&amp; !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) &#123;<br>        sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.metadataReaderFactory <span class="hljs-keyword">instanceof</span> CachingMetadataReaderFactory) &#123;<br>        <span class="hljs-comment">// Clear cache in externally provided MetadataReaderFactory; this is a no-op</span><br>        <span class="hljs-comment">// for a shared cache since it&#x27;ll be cleared by the ApplicationContext.</span><br>        ((CachingMetadataReaderFactory) <span class="hljs-built_in">this</span>.metadataReaderFactory).clearCache();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 8、遍历解析加载类定义</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">(Set&lt;ConfigurationClass&gt; configurationModel)</span> &#123;<br>    <span class="hljs-type">TrackedConditionEvaluator</span> <span class="hljs-variable">trackedConditionEvaluator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrackedConditionEvaluator</span>();<br>    <span class="hljs-keyword">for</span> (ConfigurationClass configClass : configurationModel) &#123;<br>        loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 9、加载解析出来的导入类</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBeanDefinitionsForConfigurationClass</span><span class="hljs-params">(</span><br><span class="hljs-params">    ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator)</span> &#123;<br><br>    <span class="hljs-keyword">if</span> (trackedConditionEvaluator.shouldSkip(configClass)) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> configClass.getBeanName();<br>        <span class="hljs-keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="hljs-built_in">this</span>.registry.containsBeanDefinition(beanName)) &#123;<br>            <span class="hljs-built_in">this</span>.registry.removeBeanDefinition(beanName);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (configClass.isImported()) &#123;<br>        registerBeanDefinitionForImportedConfigurationClass(configClass);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (BeanMethod beanMethod : configClass.getBeanMethods()) &#123;<br>        loadBeanDefinitionsForBeanMethod(beanMethod);<br>    &#125;<br><br>    <span class="hljs-comment">// 将解析出来的@Import导入类加载</span><br>    loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());<br>    loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、Aop代理对象的产生"><a href="#3、Aop代理对象的产生" class="headerlink" title="3、Aop代理对象的产生"></a>3、Aop代理对象的产生</h1><blockquote><p>当AnnotationAwareAspectJAutoProxyCreator类的定义信息被加载进入spring ioc中(此时还未实例化)</p></blockquote><p><img src="/img/codes/1660664916963.png" alt="1660664916963"></p><h1 id="4、Aop中涉及到的类解析"><a href="#4、Aop中涉及到的类解析" class="headerlink" title="4、Aop中涉及到的类解析"></a>4、Aop中涉及到的类解析</h1><blockquote><p>有第三电的类图我们可知AnnotationAwareAspectJAutoProxyCreator的继承体系</p></blockquote><h2 id="4-1、ProxyConfig"><a href="#4-1、ProxyConfig" class="headerlink" title="4.1、ProxyConfig"></a>4.1、ProxyConfig</h2><blockquote><p>spring通用的代理配置类，定义了公共的配置属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <br>    <span class="hljs-comment">// 是否为对象代理，(Cglib获取jdk动态代理)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">proxyTargetClass</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 是否进行动态代理优化</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">optimize</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 判断代理对象是否可以转换为Advice(通知)</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">opaque</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 是否暴露，如果为true则表示可以把代理对象暴露出来</span><br>    <span class="hljs-comment">// 设置代理是否应该由AOP框架作为ThreadLocal公开，以便通过AopContext类检索。如果一个被通知的对象需要对其自身调用另一个被通知的方法，这是很有用的(AopContext)</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">exposeProxy</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 是否冻结，指在代理后是否可以动态修改代理类,false表示可以</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">frozen</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 省略</span><br>    get|set|is...<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-2、ProxyProcessorSupport"><a href="#4-2、ProxyProcessorSupport" class="headerlink" title="4.2、ProxyProcessorSupport"></a>4.2、ProxyProcessorSupport</h2><blockquote><p>代理处理支持，在ProxyConfig基础上增加代理的通用方法</p></blockquote><h3 id="4-2-1、实现接口解析AopInfrastructureBean"><a href="#4-2-1、实现接口解析AopInfrastructureBean" class="headerlink" title="4.2.1、实现接口解析AopInfrastructureBean"></a>4.2.1、实现接口解析AopInfrastructureBean</h3><blockquote><p>AopInfrastructureBean表示一个类为aop的基础类，不会被aop进行动态代理，只起到标识作用</p></blockquote><h3 id="4-2-2、代码解析"><a href="#4-2-2、代码解析" class="headerlink" title="4.2.2、代码解析"></a>4.2.2、代码解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyProcessorSupport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ProxyConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ordered</span>, BeanClassLoaderAware, AopInfrastructureBean &#123;<br>    <br>    <span class="hljs-comment">// 代理累类加载器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">proxyClassLoader</span> <span class="hljs-operator">=</span> ClassUtils.getDefaultClassLoader();<br>    <br>    <span class="hljs-comment">// 检查累定义接口</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">evaluateProxyInterfaces</span><span class="hljs-params">(Class&lt;?&gt; beanClass, ProxyFactory proxyFactory)</span> &#123;<br>        Class&lt;?&gt;[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, getProxyClassLoader());<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasReasonableProxyInterface</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; ifc : targetInterfaces) &#123;<br>            <span class="hljs-comment">// 遍历类的接口并判断是否符合代理需求</span><br>            <span class="hljs-keyword">if</span> (!isConfigurationCallbackInterface(ifc) &amp;&amp; !isInternalLanguageInterface(ifc) &amp;&amp;<br>                ifc.getMethods().length &gt; <span class="hljs-number">0</span>) &#123;<br>                hasReasonableProxyInterface = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (hasReasonableProxyInterface) &#123;<br>            <span class="hljs-comment">// Must allow for introductions; can&#x27;t just set interfaces to the target&#x27;s interfaces only.</span><br>            <span class="hljs-comment">// 如果类实现的接口包含可被代理的接口，则将接口全部保存至代理工厂</span><br>            <span class="hljs-keyword">for</span> (Class&lt;?&gt; ifc : targetInterfaces) &#123;<br>                proxyFactory.addInterface(ifc);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 无符合要求的代理接口，则标识为直接代理类</span><br>            proxyFactory.setProxyTargetClass(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 判断接口是否是相关接口的回调接口</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConfigurationCallbackInterface</span><span class="hljs-params">(Class&lt;?&gt; ifc)</span> &#123;<br>        <span class="hljs-keyword">return</span> (InitializingBean.class == ifc || DisposableBean.class == ifc || Closeable.class == ifc ||<br>                AutoCloseable.class == ifc || ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class));<br>    &#125;<br>    <br>    <span class="hljs-comment">// 判断是否是脚本语言</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInternalLanguageInterface</span><span class="hljs-params">(Class&lt;?&gt; ifc)</span> &#123;<br><span class="hljs-keyword">return</span> (ifc.getName().equals(<span class="hljs-string">&quot;groovy.lang.GroovyObject&quot;</span>) ||<br>ifc.getName().endsWith(<span class="hljs-string">&quot;.cglib.proxy.Factory&quot;</span>) ||<br>ifc.getName().endsWith(<span class="hljs-string">&quot;.bytebuddy.MockAccess&quot;</span>));<br>&#125;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3、AbstractAutoProxyCreator"><a href="#4-3、AbstractAutoProxyCreator" class="headerlink" title="4.3、AbstractAutoProxyCreator"></a>4.3、AbstractAutoProxyCreator</h2><blockquote><p>抽象自动代理创建器，实现了SmartInstantiationAwareBeanPostProcessor接口，拥有bean生命周期内的感知能力</p></blockquote><h3 id="4-3-1、引用SmartInstantiationAwareBeanPostProcessor接口"><a href="#4-3-1、引用SmartInstantiationAwareBeanPostProcessor接口" class="headerlink" title="4.3.1、引用SmartInstantiationAwareBeanPostProcessor接口"></a>4.3.1、引用SmartInstantiationAwareBeanPostProcessor接口</h3><blockquote><p>SmartInstantiationAwareBeanPostProcessor继承了InstantiationAwareBeanPostProcessor接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SmartInstantiationAwareBeanPostProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InstantiationAwareBeanPostProcessor</span> &#123;<br>    <br>    <span class="hljs-comment">// 预测bean的类型</span><br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">default</span> Class&lt;?&gt; predictBeanType(Class&lt;?&gt; beanClass, String beanName) <span class="hljs-keyword">throws</span> BeansException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>    <br>    <span class="hljs-comment">// 返回bean的构造方法，由spring通过策略选择合适的方法实例化bean</span><br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">default</span> Constructor&lt;?&gt;[] determineCandidateConstructors(Class&lt;?&gt; beanClass, String beanName)<br><span class="hljs-keyword">throws</span> BeansException &#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>   <br>    <span class="hljs-comment">// 获取bean的早期引用，用于处理环形依赖问题</span><br>   <span class="hljs-keyword">default</span> Object <span class="hljs-title function_">getEarlyBeanReference</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-2、引用InstantiationAwareBeanPostProcessor接口"><a href="#4-3-2、引用InstantiationAwareBeanPostProcessor接口" class="headerlink" title="4.3.2、引用InstantiationAwareBeanPostProcessor接口"></a>4.3.2、引用InstantiationAwareBeanPostProcessor接口</h3><blockquote><p>InstantiationAwareBeanPostProcessor继承了BeanPostProcessor接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InstantiationAwareBeanPostProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br><br>    <span class="hljs-comment">// bean是实例化前回调</span><br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">default</span> Object <span class="hljs-title function_">postProcessBeforeInstantiation</span><span class="hljs-params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>    <br>    <span class="hljs-comment">// bean是实例后前回调(返回false的会不会执行populateBean方法内的属性填充)</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">postProcessAfterInstantiation</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>    <br>    <span class="hljs-comment">// 属性后置处理，留给实现修改实例的属性</span><br>    <span class="hljs-comment">// 在配置的BeanDefinition的propertyValues被设置到bean实例中之前，我们有机会拦截属性，并更改属性。</span><br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">default</span> PropertyValues <span class="hljs-title function_">postProcessProperties</span><span class="hljs-params">(PropertyValues pvs, Object bean, String beanName)</span><br><span class="hljs-keyword">throws</span> BeansException &#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>    <br>    <span class="hljs-comment">//废弃的方法,等同于postProcessProperties</span><br>    <span class="hljs-meta">@Deprecated</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">default</span> PropertyValues <span class="hljs-title function_">postProcessPropertyValues</span><span class="hljs-params">(</span><br><span class="hljs-params">PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><br><span class="hljs-keyword">return</span> pvs;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-3、代码解析"><a href="#4-3-3、代码解析" class="headerlink" title="4.3.3、代码解析"></a>4.3.3、代码解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAutoProxyCreator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ProxyProcessorSupport</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmartInstantiationAwareBeanPostProcessor</span>, BeanFactoryAware &#123;<br>    <span class="hljs-comment">// 标识空的代理对象</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] DO_NOT_PROXY = <span class="hljs-literal">null</span>;<br>   <span class="hljs-comment">// 识空的代理拦截器Advisor对象</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-comment">// Advisor适配注册器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AdvisorAdapterRegistry</span> <span class="hljs-variable">advisorAdapterRegistry</span> <span class="hljs-operator">=</span> GlobalAdvisorAdapterRegistry.getInstance();<br>    <span class="hljs-comment">//是否冻结对象，重写了ProxyConfig中的frozen，防止过早冻结对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">freezeProxy</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//拦截器是否应该在特定于bean的拦截器之前应用。默认是;否则，将首先应用特定于bean的拦截器。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">applyCommonInterceptorsFirst</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-comment">// 用于存储代理对象cacheKey-&gt;obj</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; targetSourcedBeans = Collections.newSetFromMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="hljs-number">16</span>));<br><br>     <span class="hljs-comment">// 用于存储实例化未完全的早期对象cacheKey-&gt;obj 防止循环引用</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Object, Object&gt; earlyProxyReferences = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="hljs-number">16</span>);<br><br>    <span class="hljs-comment">//用于存储代理对象类型cacheKey-&gt;class</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Object, Class&lt;?&gt;&gt; proxyTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="hljs-number">16</span>);<br><br>    <span class="hljs-comment">//用于存储对象是否可以被代理cacheKey-&gt;boolean</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Object, Boolean&gt; advisedBeans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="hljs-number">256</span>);<br>&#125;<br><span class="hljs-comment">// 接口方法，放回代理对象类型缓存中类型</span><br><span class="hljs-keyword">public</span> Class&lt;?&gt; predictBeanType(Class&lt;?&gt; beanClass, String beanName) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.proxyTypes.isEmpty()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-type">Object</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> getCacheKey(beanClass, beanName);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.proxyTypes.get(cacheKey);<br>&#125;<br><br><span class="hljs-comment">// 并判断是否需要代理早期对象并返回</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getEarlyBeanReference</span><span class="hljs-params">(Object bean, String beanName)</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> getCacheKey(bean.getClass(), beanName);<br><span class="hljs-built_in">this</span>.earlyProxyReferences.put(cacheKey, bean);<br><span class="hljs-keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);<br>&#125;<br><br><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInstantiation</span><span class="hljs-params">(Class&lt;?&gt; beanClass, String beanName)</span> &#123;<br>        <span class="hljs-comment">// 获取key</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> getCacheKey(beanClass, beanName);<br><br><span class="hljs-keyword">if</span> (!StringUtils.hasLength(beanName) || !<span class="hljs-built_in">this</span>.targetSourcedBeans.contains(beanName)) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.advisedBeans.containsKey(cacheKey)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) &#123;<br><span class="hljs-built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Create proxy here if we have a custom TargetSource.</span><br><span class="hljs-comment">// Suppresses unnecessary default instantiation of the target bean:</span><br><span class="hljs-comment">// The TargetSource will handle target instances in a custom fashion.</span><br>        <span class="hljs-comment">// 如果有自定义的targetSource则开始代理对象</span><br><span class="hljs-type">TargetSource</span> <span class="hljs-variable">targetSource</span> <span class="hljs-operator">=</span> getCustomTargetSource(beanClass, beanName);<br><span class="hljs-keyword">if</span> (targetSource != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (StringUtils.hasLength(beanName)) &#123;<br><span class="hljs-built_in">this</span>.targetSourcedBeans.add(beanName);<br>&#125;<br>            <span class="hljs-comment">// 获取适配代理对象的切面advisor(子类实现)</span><br>Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);<br>            <span class="hljs-comment">// 创建代理对象</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> createProxy(beanClass, beanName, specificInterceptors, targetSource);<br>            <span class="hljs-comment">//缓存代理对象类型</span><br><span class="hljs-built_in">this</span>.proxyTypes.put(cacheKey, proxy.getClass());<br><span class="hljs-keyword">return</span> proxy;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">// 动态代理的执行位置</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object bean, String beanName)</span> &#123;<br><span class="hljs-keyword">if</span> (bean != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> getCacheKey(bean.getClass(), beanName);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.earlyProxyReferences.remove(cacheKey) != bean) &#123;<br>                <span class="hljs-comment">//如果早期未代理对象则开始判断代理</span><br><span class="hljs-keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br><span class="hljs-comment">// 获取缓存key</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">getCacheKey</span><span class="hljs-params">(Class&lt;?&gt; beanClass, <span class="hljs-meta">@Nullable</span> String beanName)</span> &#123;<br><span class="hljs-keyword">if</span> (StringUtils.hasLength(beanName)) &#123;<br><span class="hljs-keyword">return</span> (FactoryBean.class.isAssignableFrom(beanClass) ?<br>BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> beanClass;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 根据条件返回原对象或代理对象</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">wrapIfNecessary</span><span class="hljs-params">(Object bean, String beanName, Object cacheKey)</span> &#123;<br>        <span class="hljs-comment">// 已经生成代理对象的直接返回</span><br><span class="hljs-keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="hljs-built_in">this</span>.targetSourcedBeans.contains(beanName)) &#123;<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br>        <span class="hljs-comment">//不能代理的bean返回</span><br><span class="hljs-keyword">if</span> (Boolean.FALSE.equals(<span class="hljs-built_in">this</span>.advisedBeans.get(cacheKey))) &#123;<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br>        <span class="hljs-comment">//不符合条件的bean返回</span><br><span class="hljs-keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;<br><span class="hljs-built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br><span class="hljs-comment">// Create proxy if we have advice.</span><br>        <span class="hljs-comment">// 获取对象匹配的adviosr</span><br>Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 如果有匹配到的advisor则生成代理对象</span><br><span class="hljs-keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;<br><span class="hljs-built_in">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);<br><span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> createProxy(<br>bean.getClass(), beanName, specificInterceptors, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonTargetSource</span>(bean));<br><span class="hljs-built_in">this</span>.proxyTypes.put(cacheKey, proxy.getClass());<br><span class="hljs-keyword">return</span> proxy;<br>&#125;<br><br><span class="hljs-built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br><span class="hljs-comment">// 判断类是否是aop接口实现类，不能代理</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInfrastructureClass</span><span class="hljs-params">(Class&lt;?&gt; beanClass)</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">retVal</span> <span class="hljs-operator">=</span> Advice.class.isAssignableFrom(beanClass) ||<br>Pointcut.class.isAssignableFrom(beanClass) ||<br>Advisor.class.isAssignableFrom(beanClass) ||<br>AopInfrastructureBean.class.isAssignableFrom(beanClass);<br><span class="hljs-keyword">if</span> (retVal &amp;&amp; logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Did not attempt to auto-proxy infrastructure class [&quot;</span> + beanClass.getName() + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> retVal;<br>&#125;<br><br><span class="hljs-comment">// 判断是否是基础元数据，不能代理</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldSkip</span><span class="hljs-params">(Class&lt;?&gt; beanClass, String beanName)</span> &#123;<br><span class="hljs-keyword">return</span> AutoProxyUtils.isOriginalInstance(beanName, beanClass);<br>&#125;<br><br><span class="hljs-comment">// 由匹配到的TargetSourceCreator生成TargetSource对象</span><br><span class="hljs-keyword">protected</span> TargetSource <span class="hljs-title function_">getCustomTargetSource</span><span class="hljs-params">(Class&lt;?&gt; beanClass, String beanName)</span> &#123;<br><span class="hljs-comment">// We can&#x27;t create fancy target sources for directly registered singletons.</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.customTargetSourceCreators != <span class="hljs-literal">null</span> &amp;&amp;<br><span class="hljs-built_in">this</span>.beanFactory != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.beanFactory.containsBean(beanName)) &#123;<br><span class="hljs-keyword">for</span> (TargetSourceCreator tsc : <span class="hljs-built_in">this</span>.customTargetSourceCreators) &#123;<br><span class="hljs-type">TargetSource</span> <span class="hljs-variable">ts</span> <span class="hljs-operator">=</span> tsc.getTargetSource(beanClass, beanName);<br><span class="hljs-keyword">if</span> (ts != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Found a matching TargetSource.</span><br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;TargetSourceCreator [&quot;</span> + tsc +<br><span class="hljs-string">&quot;] found custom TargetSource for bean with name &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> ts;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// No custom TargetSource found.</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">// 创建代理对象</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">createProxy</span><span class="hljs-params">(Class&lt;?&gt; beanClass, <span class="hljs-meta">@Nullable</span> String beanName,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Object[] specificInterceptors, TargetSource targetSource)</span> &#123;<br><br>        <span class="hljs-comment">// 暴露指定的对象</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.beanFactory <span class="hljs-keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;<br>AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="hljs-built_in">this</span>.beanFactory, beanName, beanClass);<br>&#125;<br><br>        <span class="hljs-comment">// 创建代理对象工厂类</span><br><span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">proxyFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>();<br>proxyFactory.copyFrom(<span class="hljs-built_in">this</span>);<br><br>        <span class="hljs-comment">// 决策是代理类还是通过接口代理</span><br><span class="hljs-keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;<br><span class="hljs-keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;<br>proxyFactory.setProxyTargetClass(<span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 检查是否有合适的接口可以代理</span><br>evaluateProxyInterfaces(beanClass, proxyFactory);<br>&#125;<br>&#125;<br><br>        <span class="hljs-comment">// 将获取到的Interceptor转换成advisor</span><br>Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);<br>proxyFactory.addAdvisors(advisors);<br>proxyFactory.setTargetSource(targetSource);<br>        <span class="hljs-comment">// 设置属性</span><br>customizeProxyFactory(proxyFactory);<br>proxyFactory.setFrozen(<span class="hljs-built_in">this</span>.freezeProxy);<br><span class="hljs-keyword">if</span> (advisorsPreFiltered()) &#123;<br>proxyFactory.setPreFiltered(<span class="hljs-literal">true</span>);<br>&#125;<br>        <span class="hljs-comment">// 产生代理对象</span><br><span class="hljs-keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());<br>&#125;<br><br><span class="hljs-comment">// 判断是代理类还是代理接口</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldProxyTargetClass</span><span class="hljs-params">(Class&lt;?&gt; beanClass, <span class="hljs-meta">@Nullable</span> String beanName)</span> &#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span>.beanFactory <span class="hljs-keyword">instanceof</span> ConfigurableListableBeanFactory &amp;&amp;<br>AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) <span class="hljs-built_in">this</span>.beanFactory, beanName));<br>&#125;<br><br><span class="hljs-comment">//拦截器转换为Advisor</span><br><span class="hljs-keyword">protected</span> Advisor[] buildAdvisors(<span class="hljs-meta">@Nullable</span> String beanName, <span class="hljs-meta">@Nullable</span> Object[] specificInterceptors) &#123;<br><span class="hljs-comment">// Handle prototypes correctly...</span><br>        <span class="hljs-comment">// 获取通用拦截器</span><br>Advisor[] commonInterceptors = resolveInterceptorNames();<br><br>List&lt;Object&gt; allInterceptors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">if</span> (specificInterceptors != <span class="hljs-literal">null</span>) &#123;<br>allInterceptors.addAll(Arrays.asList(specificInterceptors));<br><span class="hljs-keyword">if</span> (commonInterceptors.length &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 通过属性设置判断通用蓝拦截器设置在前还是后</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.applyCommonInterceptorsFirst) &#123;<br>allInterceptors.addAll(<span class="hljs-number">0</span>, Arrays.asList(commonInterceptors));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>allInterceptors.addAll(Arrays.asList(commonInterceptors));<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">nrOfCommonInterceptors</span> <span class="hljs-operator">=</span> commonInterceptors.length;<br><span class="hljs-type">int</span> <span class="hljs-variable">nrOfSpecificInterceptors</span> <span class="hljs-operator">=</span> (specificInterceptors != <span class="hljs-literal">null</span> ? specificInterceptors.length : <span class="hljs-number">0</span>);<br>logger.trace(<span class="hljs-string">&quot;Creating implicit proxy for bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; with &quot;</span> + nrOfCommonInterceptors +<br><span class="hljs-string">&quot; common interceptors and &quot;</span> + nrOfSpecificInterceptors + <span class="hljs-string">&quot; specific interceptors&quot;</span>);<br>&#125;<br><br>        <span class="hljs-comment">//通过advisorAdapterRegistry将蓝机器包装转换为Advisor</span><br>Advisor[] advisors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Advisor</span>[allInterceptors.size()];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; allInterceptors.size(); i++) &#123;<br>advisors[i] = <span class="hljs-built_in">this</span>.advisorAdapterRegistry.wrap(allInterceptors.get(i));<br>&#125;<br><span class="hljs-keyword">return</span> advisors;<br>&#125;<br><br><span class="hljs-comment">// 获取通用拦截器</span><br><span class="hljs-keyword">private</span> Advisor[] resolveInterceptorNames() &#123;<br><span class="hljs-type">BeanFactory</span> <span class="hljs-variable">bf</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.beanFactory;<br><span class="hljs-type">ConfigurableBeanFactory</span> <span class="hljs-variable">cbf</span> <span class="hljs-operator">=</span> (bf <span class="hljs-keyword">instanceof</span> ConfigurableBeanFactory ? (ConfigurableBeanFactory) bf : <span class="hljs-literal">null</span>);<br>List&lt;Advisor&gt; advisors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (String beanName : <span class="hljs-built_in">this</span>.interceptorNames) &#123;<br><span class="hljs-keyword">if</span> (cbf == <span class="hljs-literal">null</span> || !cbf.isCurrentlyInCreation(beanName)) &#123;<br>Assert.state(bf != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;BeanFactory required for resolving interceptor names&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> bf.getBean(beanName);<br>advisors.add(<span class="hljs-built_in">this</span>.advisorAdapterRegistry.wrap(next));<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> advisors.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Advisor</span>[<span class="hljs-number">0</span>]);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-4、AbstractAdvisorAutoProxyCreator"><a href="#4-4、AbstractAdvisorAutoProxyCreator" class="headerlink" title="4.4、AbstractAdvisorAutoProxyCreator"></a>4.4、AbstractAdvisorAutoProxyCreator</h2><blockquote><p> 通用的自动代理创建器，它基于检测到的每个bean的advisor为特定的bean构建AOP代理。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAdvisorAutoProxyCreator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAutoProxyCreator</span> &#123;<br>    <span class="hljs-comment">// advisor检索辅助类</span><br>    <span class="hljs-keyword">private</span> BeanFactoryAdvisorRetrievalHelper advisorRetrievalHelper;<br>    <br>    <span class="hljs-comment">// BeanFactoryAware回调时初始化advisor检索器</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;<br><span class="hljs-built_in">this</span>.advisorRetrievalHelper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanFactoryAdvisorRetrievalHelperAdapter</span>(beanFactory);<br>&#125;<br>    <br>    <span class="hljs-comment">// 获取bean匹配到的advisor(如正则等)</span><br>    <span class="hljs-keyword">protected</span> Object[] getAdvicesAndAdvisorsForBean(<br>Class&lt;?&gt; beanClass, String beanName, <span class="hljs-meta">@Nullable</span> TargetSource targetSource) &#123;<br><br>List&lt;Advisor&gt; advisors = findEligibleAdvisors(beanClass, beanName);<br><span class="hljs-keyword">if</span> (advisors.isEmpty()) &#123;<br>            <span class="hljs-comment">// 查询不到则返回父类定义的空对象</span><br><span class="hljs-keyword">return</span> DO_NOT_PROXY;<br>&#125;<br><span class="hljs-keyword">return</span> advisors.toArray();<br>&#125;<br>    <br>    <span class="hljs-comment">// 检索适合匹配的advisor</span><br>    <span class="hljs-keyword">protected</span> List&lt;Advisor&gt; <span class="hljs-title function_">findEligibleAdvisors</span><span class="hljs-params">(Class&lt;?&gt; beanClass, String beanName)</span> &#123;<br>List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();<br>List&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);<br>extendAdvisors(eligibleAdvisors);<br><span class="hljs-keyword">if</span> (!eligibleAdvisors.isEmpty()) &#123;<br>            <span class="hljs-comment">// 按照各种通知先后顺序排序</span><br>eligibleAdvisors = sortAdvisors(eligibleAdvisors);<br>&#125;<br><span class="hljs-keyword">return</span> eligibleAdvisors;<br>&#125;<br>    <br>    <span class="hljs-keyword">protected</span> List&lt;Advisor&gt; <span class="hljs-title function_">findCandidateAdvisors</span><span class="hljs-params">()</span> &#123;<br>Assert.state(<span class="hljs-built_in">this</span>.advisorRetrievalHelper != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;No BeanFactoryAdvisorRetrievalHelper available&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.advisorRetrievalHelper.findAdvisorBeans();<br>&#125;<br>    <br>    <span class="hljs-comment">// 对查询到的advisor按照正则或其他方式判断是否匹配</span><br>    <span class="hljs-keyword">protected</span> List&lt;Advisor&gt; <span class="hljs-title function_">findAdvisorsThatCanApply</span><span class="hljs-params">(</span><br><span class="hljs-params">List&lt;Advisor&gt; candidateAdvisors, Class&lt;?&gt; beanClass, String beanName)</span> &#123;<br><br>ProxyCreationContext.setCurrentProxiedBeanName(beanName);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">return</span> AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>ProxyCreationContext.setCurrentProxiedBeanName(<span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-comment">//排序方法</span><br>    <span class="hljs-keyword">protected</span> List&lt;Advisor&gt; <span class="hljs-title function_">sortAdvisors</span><span class="hljs-params">(List&lt;Advisor&gt; advisors)</span> &#123;<br>AnnotationAwareOrderComparator.sort(advisors);<br><span class="hljs-keyword">return</span> advisors;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-5、AspectJAwareAdvisorAutoProxyCreator"><a href="#4-5、AspectJAwareAdvisorAutoProxyCreator" class="headerlink" title="4.5、AspectJAwareAdvisorAutoProxyCreator"></a>4.5、AspectJAwareAdvisorAutoProxyCreator</h2><blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AspectJAwareAdvisorAutoProxyCreator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAdvisorAutoProxyCreator</span> &#123;<br>    <br>    <span class="hljs-comment">// 默认的advisor排序器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Comparator&lt;Advisor&gt; DEFAULT_PRECEDENCE_COMPARATOR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AspectJPrecedenceComparator</span>();<br>    <br>    <span class="hljs-comment">// 重写排序方法</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> List&lt;Advisor&gt; <span class="hljs-title function_">sortAdvisors</span><span class="hljs-params">(List&lt;Advisor&gt; advisors)</span> &#123;<br>List&lt;PartiallyComparableAdvisorHolder&gt; partiallyComparableAdvisors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(advisors.size());<br><span class="hljs-keyword">for</span> (Advisor advisor : advisors) &#123;<br>partiallyComparableAdvisors.add(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">PartiallyComparableAdvisorHolder</span>(advisor, DEFAULT_PRECEDENCE_COMPARATOR));<br>&#125;<br>List&lt;PartiallyComparableAdvisorHolder&gt; sorted = PartialOrder.sort(partiallyComparableAdvisors);<br><span class="hljs-keyword">if</span> (sorted != <span class="hljs-literal">null</span>) &#123;<br>List&lt;Advisor&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(advisors.size());<br><span class="hljs-keyword">for</span> (PartiallyComparableAdvisorHolder pcAdvisor : sorted) &#123;<br>result.add(pcAdvisor.getAdvisor());<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.sortAdvisors(advisors);<br>&#125;<br>&#125;<br>   <br>   <span class="hljs-comment">// 根据条件判断是否扩展advisor</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extendAdvisors</span><span class="hljs-params">(List&lt;Advisor&gt; candidateAdvisors)</span> &#123;<br>AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(candidateAdvisors);<br>&#125;<br>    <br>    <span class="hljs-comment">// 在父类的基础上增加切面名称过滤</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldSkip</span><span class="hljs-params">(Class&lt;?&gt; beanClass, String beanName)</span> &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Consider optimization by caching the list of the aspect names</span><br>List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();<br><span class="hljs-keyword">for</span> (Advisor advisor : candidateAdvisors) &#123;<br><span class="hljs-keyword">if</span> (advisor <span class="hljs-keyword">instanceof</span> AspectJPointcutAdvisor &amp;&amp;<br>((AspectJPointcutAdvisor) advisor).getAspectName().equals(beanName)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.shouldSkip(beanClass, beanName);<br>&#125;<br>    <br>    <span class="hljs-comment">//实现AspectJ的PartialComparable接口，用于定义部分排序</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PartiallyComparableAdvisorHolder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PartialComparable</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-6、AnnotationAwareAspectJAutoProxyCreator"><a href="#4-6、AnnotationAwareAspectJAutoProxyCreator" class="headerlink" title="4.6、AnnotationAwareAspectJAutoProxyCreator"></a>4.6、AnnotationAwareAspectJAutoProxyCreator</h2><blockquote><p>注解aop动态代理核心类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationAwareAspectJAutoProxyCreator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AspectJAwareAdvisorAutoProxyCreator</span> &#123;<br>    <span class="hljs-comment">// todo</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ioc刷新过程中的各项接口</title>
    <link href="/2022/08/14/spring/ioc-interface/"/>
    <url>/2022/08/14/spring/ioc-interface/</url>
    
    <content type="html"><![CDATA[<h1 id="1、aware接口"><a href="#1、aware接口" class="headerlink" title="1、aware接口"></a>1、aware接口</h1><blockquote><p>aware代表感知，在spring中主要作用为感觉对应的bean实例，在spring ioc创建过程中会回调各种aware接口进行赋值</p></blockquote><h2 id="1-1、EnvironmentAware"><a href="#1-1、EnvironmentAware" class="headerlink" title="1.1、EnvironmentAware"></a>1.1、EnvironmentAware</h2><blockquote><p>环境感知接口</p><p>通常用于获取spring的环境变量，例如配置的数据库连接密码等，也可以进行动态修改</p><p>EnvironmentAware的回调在postProcessBeforeInitialization处执行，bean实例化还未初始化，所以动态修改配置属性值是可以被感知的</p></blockquote><h2 id="1-2、EmbeddedValueResolverAware"><a href="#1-2、EmbeddedValueResolverAware" class="headerlink" title="1.2、EmbeddedValueResolverAware"></a>1.2、EmbeddedValueResolverAware</h2><blockquote><p>解析嵌入定义值感知接口</p><p>通常用于获取嵌入式属性值解析器，可以自定义解析特殊标识的属性值</p><p>${}、#{}、</p></blockquote><h2 id="1-3、ResourceLoaderAware"><a href="#1-3、ResourceLoaderAware" class="headerlink" title="1.3、ResourceLoaderAware"></a>1.3、ResourceLoaderAware</h2><blockquote><p>资源加载感知</p><p>获取运行时资源加载器，在spring ioc中就是applicationContext</p></blockquote><h2 id="1-4、ApplicationEventPublisherAware"><a href="#1-4、ApplicationEventPublisherAware" class="headerlink" title="1.4、ApplicationEventPublisherAware"></a>1.4、ApplicationEventPublisherAware</h2><blockquote><p>事件分别器感知</p><p>ApplicationEventPublisher事件分别器，同一管理事件与监听器之间的触发关系，发布事件</p></blockquote><h2 id="1-5、MessageSourceAware"><a href="#1-5、MessageSourceAware" class="headerlink" title="1.5、MessageSourceAware"></a>1.5、MessageSourceAware</h2><blockquote><p>消息源感知</p><p>获取消息源接口，主要用于国际化</p></blockquote><h2 id="1-6、ApplicationContextAware"><a href="#1-6、ApplicationContextAware" class="headerlink" title="1.6、ApplicationContextAware"></a>1.6、ApplicationContextAware</h2><blockquote><p>应用上下文感知</p><p>获取ioc中的核心容器</p></blockquote><h2 id="1-7、LoadTimeWeaverAware"><a href="#1-7、LoadTimeWeaverAware" class="headerlink" title="1.7、LoadTimeWeaverAware"></a>1.7、LoadTimeWeaverAware</h2><blockquote><p> LoadTimeWeaver感知</p><p>LoadTimeWeaver用于当类被载入jvm时，动态转化类。 加载时织入</p></blockquote><h2 id="1-8、BeanNameAware"><a href="#1-8、BeanNameAware" class="headerlink" title="1.8、BeanNameAware"></a>1.8、BeanNameAware</h2><blockquote><p>bean名称感知</p><p>回调设置bean的设置bean名称(只设置自己的)，能够获取到bean本身在容器中的名称</p></blockquote><h2 id="1-9、BeanClassLoaderAware"><a href="#1-9、BeanClassLoaderAware" class="headerlink" title="1.9、BeanClassLoaderAware"></a>1.9、BeanClassLoaderAware</h2><blockquote><p>bean加载器感知</p><p>回调设置加载bean的类加载器</p></blockquote><h2 id="1-10、BeanFactoryAware"><a href="#1-10、BeanFactoryAware" class="headerlink" title="1.10、BeanFactoryAware"></a>1.10、BeanFactoryAware</h2><blockquote><p>beanFactory感知</p><p>回调设置加载类的bean工厂</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>1-6</p><p>​由spring委托ApplicationContextAwareProcessor类进行上述aware的回调</p><p>7</p><p>​由LoadTimeWeaverAwareProcessor进行回调</p><p>8-10</p><p>​由AbstractAutowireCapableBeanFactory.invokeAwareMethods()执行回调</p><p>aware就是感知接口，通过实现对应接口可以在spring完成容器刷新后得到对应的资源，以此作特殊的功能定制</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>spring IOC 容器刷新解析</title>
    <link href="/2022/08/13/spring/spring-ioc/"/>
    <url>/2022/08/13/spring/spring-ioc/</url>
    
    <content type="html"><![CDATA[<h1 id="1、创建容器"><a href="#1、创建容器" class="headerlink" title="1、创建容器"></a>1、创建容器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ClassPathXmlApplicationContext</span><span class="hljs-params">(</span><br><span class="hljs-params">String[] configLocations, <span class="hljs-type">boolean</span> refresh, <span class="hljs-meta">@Nullable</span> ApplicationContext parent)</span><br><span class="hljs-keyword">throws</span> BeansException &#123;<br>       <span class="hljs-comment">//指定容器父类null</span><br><span class="hljs-built_in">super</span>(parent);<br>       <span class="hljs-comment">//设置配置文件路径</span><br>setConfigLocations(configLocations);<br><span class="hljs-keyword">if</span> (refresh) &#123;<br>           <span class="hljs-comment">//刷新容器</span><br>refresh();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-1、setConfigLocations"><a href="#1-1、setConfigLocations" class="headerlink" title="1.1、setConfigLocations()"></a>1.1、setConfigLocations()</h2><blockquote><p>设置文件路径、主要为记录配置文件信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setConfigLocations</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> String... locations)</span> &#123;<br>    <span class="hljs-keyword">if</span> (locations != <span class="hljs-literal">null</span>) &#123;<br>        Assert.noNullElements(locations, <span class="hljs-string">&quot;Config locations must not be null&quot;</span>);<br>        <span class="hljs-built_in">this</span>.configLocations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[locations.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; locations.length; i++) &#123;<br>            <span class="hljs-built_in">this</span>.configLocations[i] = resolvePath(locations[i]).trim();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.configLocations = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//resolvePath()</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">resolvePath</span><span class="hljs-params">(String path)</span> &#123;<br>    <span class="hljs-keyword">return</span> getEnvironment().resolveRequiredPlaceholders(path);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-2、refresh"><a href="#1-2、refresh" class="headerlink" title="1.2、refresh()"></a>1.2、refresh()</h2><blockquote><p>刷新容器、spring核心方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.startupShutdownMonitor) &#123;<br>            <span class="hljs-comment">//每个操作的记录</span><br><span class="hljs-type">StartupStep</span> <span class="hljs-variable">contextRefresh</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.refresh&quot;</span>);<br><br><span class="hljs-comment">// Prepare this context for refreshing.</span><br>            <span class="hljs-comment">// 设置容器的启动状态、启动时间、初始化上下文占位符、校验必填的文件、记录刷新之前就存在的事件与监听器</span><br>prepareRefresh();<br><br><span class="hljs-comment">// Tell the subclass to refresh the internal bean factory.</span><br>            <span class="hljs-comment">// 1、若执行前有beanFactory信息，则销毁beanFactory以及之前创建的bean</span><br>            <span class="hljs-comment">// 2、创建一个默认的beanFactory(DefaultListableBeanFactory)</span><br>            <span class="hljs-comment">// 3、设置beanfactory的配置信息，读取配置文件的beanfinition信息并保存在beanFactory</span><br><span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> obtainFreshBeanFactory();<br><br><span class="hljs-comment">// Prepare the bean factory for use in this context.</span><br>            <span class="hljs-comment">// 预设置beanFactory的部分属性</span><br>prepareBeanFactory(beanFactory);<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// Allows post-processing of the bean factory in context subclasses.</span><br>                <span class="hljs-comment">// 允许在上下文子类中对bean工厂进行后处理。 </span><br>postProcessBeanFactory(beanFactory);<br><br><span class="hljs-type">StartupStep</span> <span class="hljs-variable">beanPostProcess</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.beans.post-process&quot;</span>);<br><span class="hljs-comment">// Invoke factory processors registered as beans in the context.</span><br>                <span class="hljs-comment">// 初始化并执行BeanFactoryPostProcressor回调</span><br>invokeBeanFactoryPostProcessors(beanFactory);<br><br><span class="hljs-comment">// Register bean processors that intercept bean creation.</span><br>                <span class="hljs-comment">// 注册BeanPostProcressor，未实例化</span><br>registerBeanPostProcessors(beanFactory);<br>beanPostProcess.end();<br><br><span class="hljs-comment">// Initialize message source for this context.</span><br>                <span class="hljs-comment">// 初始化消息源,用于国际化</span><br>initMessageSource();<br><br><span class="hljs-comment">// Initialize event multicaster for this context.</span><br>                <span class="hljs-comment">// 初始化事件分发器</span><br>initApplicationEventMulticaster();<br><br><span class="hljs-comment">// Initialize other special beans in specific context subclasses.</span><br>                <span class="hljs-comment">// 子类回调刷新方案</span><br>onRefresh();<br><br><span class="hljs-comment">// Check for listener beans and register them.</span><br>                <span class="hljs-comment">// 向分发器中注册监听器</span><br>registerListeners();<br><br><span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span><br>                <span class="hljs-comment">// 实例化单实例bean</span><br>finishBeanFactoryInitialization(beanFactory);<br><br><span class="hljs-comment">// Last step: publish corresponding event.</span><br>                <span class="hljs-comment">// 发布容器刷新事件、资源清理</span><br>finishRefresh();<br>&#125;<br><br><span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br><span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;<br>logger.warn(<span class="hljs-string">&quot;Exception encountered during context initialization - &quot;</span> +<br><span class="hljs-string">&quot;cancelling refresh attempt: &quot;</span> + ex);<br>&#125;<br><br><span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span><br>                <span class="hljs-comment">// 销毁已经实例化的bean</span><br>destroyBeans();<br><br><span class="hljs-comment">// Reset &#x27;active&#x27; flag.</span><br>                <span class="hljs-comment">// 设置容器刷新标识</span><br>cancelRefresh(ex);<br><br><span class="hljs-comment">// Propagate exception to caller.</span><br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><br><span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// Reset common introspection caches in Spring&#x27;s core, since we</span><br><span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span><br>                <span class="hljs-comment">// 重新设置缓存</span><br>resetCommonCaches();<br>contextRefresh.end();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、刷新核心方法"><a href="#2、刷新核心方法" class="headerlink" title="2、刷新核心方法"></a>2、刷新核心方法</h1><h2 id="2-1、prepareRefresh"><a href="#2-1、prepareRefresh" class="headerlink" title="2.1、prepareRefresh()"></a>2.1、prepareRefresh()</h2><blockquote><p>为刷新准备这个上下文，设置它的启动日期和活动标志，以及执行任何属性源的初始化。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareRefresh</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Switch to active.</span><br>    <span class="hljs-comment">// 记录启动时间</span><br><span class="hljs-built_in">this</span>.startupDate = System.currentTimeMillis();<br><span class="hljs-comment">//设置容器状态</span><br>    <span class="hljs-built_in">this</span>.closed.set(<span class="hljs-literal">false</span>);<br><span class="hljs-built_in">this</span>.active.set(<span class="hljs-literal">true</span>);<br><br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Refreshing &quot;</span> + <span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>logger.debug(<span class="hljs-string">&quot;Refreshing &quot;</span> + getDisplayName());<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Initialize any placeholder property sources in the context environment.</span><br><span class="hljs-comment">// 初始化上下文环境中的任何占位符属性源</span><br>    initPropertySources();<br><br><span class="hljs-comment">// Validate that all properties marked as required are resolvable:</span><br><span class="hljs-comment">// see ConfigurablePropertyResolver#setRequiredProperties</span><br>    <span class="hljs-comment">// 验证所有标记为required的属性是可解析的:</span><br>getEnvironment().validateRequiredProperties();<br><br><span class="hljs-comment">// Store pre-refresh ApplicationListeners...</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.earlyApplicationListeners == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 记录容器刷新前的监听器</span><br><span class="hljs-built_in">this</span>.earlyApplicationListeners = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(<span class="hljs-built_in">this</span>.applicationListeners);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Reset local application listeners to pre-refresh state.</span><br>            <span class="hljs-comment">// 如果之前容器还有刷新前监听器就全部加入容器中</span><br><span class="hljs-built_in">this</span>.applicationListeners.clear();<br><span class="hljs-built_in">this</span>.applicationListeners.addAll(<span class="hljs-built_in">this</span>.earlyApplicationListeners);<br>&#125;<br><br><span class="hljs-comment">// Allow for the collection of early ApplicationEvents,</span><br><span class="hljs-comment">// to be published once the multicaster is available...</span><br>    <span class="hljs-comment">// 主要为记录容器事件分发器创建之前的事件信息，在分发器创建完成后就会发布事件消息</span><br><span class="hljs-built_in">this</span>.earlyApplicationEvents = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2、refreshBeanFactory"><a href="#2-2、refreshBeanFactory" class="headerlink" title="2.2、refreshBeanFactory()"></a>2.2、refreshBeanFactory()</h2><blockquote><p>创建容器bean工厂、加载bean定义信息、设置beanfactory属性(是否准许环形依赖、bean覆盖)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refreshBeanFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    <span class="hljs-comment">//如果之前有bean工厂、则执行销毁</span><br>    <span class="hljs-keyword">if</span> (hasBeanFactory()) &#123;<br>        destroyBeans();<br>        closeBeanFactory();<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 创建一个默认的beanFGactory</span><br>        <span class="hljs-type">DefaultListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> createBeanFactory();<br>        <span class="hljs-comment">// 设置序列化id</span><br>        beanFactory.setSerializationId(getId());<br>        <span class="hljs-comment">// 设置beanfactory的属性</span><br>        customizeBeanFactory(beanFactory);<br>        <span class="hljs-comment">// 加载bean定义至factory</span><br>        <span class="hljs-comment">// 主要分为xml和配置文件</span><br>        loadBeanDefinitions(beanFactory);<br>        <span class="hljs-built_in">this</span>.beanFactory = beanFactory;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationContextException</span>(<span class="hljs-string">&quot;I/O error parsing bean definition source for &quot;</span> + getDisplayName(), ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-1、customizeBeanFactory"><a href="#2-2-1、customizeBeanFactory" class="headerlink" title="2.2.1、customizeBeanFactory()"></a>2.2.1、customizeBeanFactory()</h3><blockquote><p>设置beanfactory环形依赖、bean覆盖属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customizeBeanFactory</span><span class="hljs-params">(DefaultListableBeanFactory beanFactory)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.allowBeanDefinitionOverriding != <span class="hljs-literal">null</span>) &#123;<br> <span class="hljs-comment">//bean定义覆盖</span><br>        beanFactory.setAllowBeanDefinitionOverriding(<span class="hljs-built_in">this</span>.allowBeanDefinitionOverriding);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.allowCircularReferences != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//循环引用</span><br>        beanFactory.setAllowCircularReferences(<span class="hljs-built_in">this</span>.allowCircularReferences);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3、prepareBeanFactory"><a href="#2-3、prepareBeanFactory" class="headerlink" title="2.3、prepareBeanFactory()"></a>2.3、prepareBeanFactory()</h2><blockquote><p>预设置beanFactory的部分属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;<br><span class="hljs-comment">// Tell the internal bean factory to use the context&#x27;s class loader etc.</span><br>       <span class="hljs-comment">// 设置bean的classloader</span><br>beanFactory.setBeanClassLoader(getClassLoader());<br><span class="hljs-keyword">if</span> (!shouldIgnoreSpel) &#123;<br>           <span class="hljs-comment">//设置springEL表达式解析器</span><br>beanFactory.setBeanExpressionResolver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardBeanExpressionResolver</span>(beanFactory.getBeanClassLoader()));<br>&#125;<br>       <span class="hljs-comment">//设置配置文件编辑注册器</span><br>beanFactory.addPropertyEditorRegistrar(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceEditorRegistrar</span>(<span class="hljs-built_in">this</span>, getEnvironment()));<br><br><span class="hljs-comment">// Configure the bean factory with context callbacks.</span><br>       <span class="hljs-comment">// 设置aware接口统一处理</span><br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationContextAwareProcessor</span>(<span class="hljs-built_in">this</span>));<br><span class="hljs-comment">//忽略实现下列接口的自动注入功能，非注解注入</span><br>       beanFactory.ignoreDependencyInterface(EnvironmentAware.class);<br>beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);<br>beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);<br>beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);<br>beanFactory.ignoreDependencyInterface(MessageSourceAware.class);<br>beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);<br>beanFactory.ignoreDependencyInterface(ApplicationStartupAware.class);<br><br><span class="hljs-comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span><br><span class="hljs-comment">// MessageSource registered (and found for autowiring) as a bean.</span><br>       <span class="hljs-comment">// 设置以下类在spring ioc中的默认实现</span><br>beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);<br>beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="hljs-built_in">this</span>);<br>beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="hljs-built_in">this</span>);<br>beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="hljs-built_in">this</span>);<br><br><span class="hljs-comment">// Register early post-processor for detecting inner beans as ApplicationListeners.</span><br>       <span class="hljs-comment">// 设置一个beanPostProcressor，主要在bean创建过程中筛选实现了ApplicationListener接口的bean并加入ioc容器中，同时在该bean销毁时从ioc监听器列表中移除</span><br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationListenerDetector</span>(<span class="hljs-built_in">this</span>));<br><br><span class="hljs-comment">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span><br>       <span class="hljs-comment">// todo</span><br><span class="hljs-keyword">if</span> (!NativeDetector.inNativeImage() &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;<br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadTimeWeaverAwareProcessor</span>(beanFactory));<br><span class="hljs-comment">// Set a temporary ClassLoader for type matching.</span><br>beanFactory.setTempClassLoader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextTypeMatchClassLoader</span>(beanFactory.getBeanClassLoader()));<br>&#125;<br><br><span class="hljs-comment">// Register default environment beans.</span><br>       <span class="hljs-comment">//设置默认的环境bean</span><br><span class="hljs-keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;<br>beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());<br>&#125;<br><span class="hljs-keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;<br>beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());<br>&#125;<br><span class="hljs-keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;<br>beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());<br>&#125;<br><span class="hljs-keyword">if</span> (!beanFactory.containsLocalBean(APPLICATION_STARTUP_BEAN_NAME)) &#123;<br>beanFactory.registerSingleton(APPLICATION_STARTUP_BEAN_NAME, getApplicationStartup());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-1、自动注入与注解注入区别"><a href="#2-3-1、自动注入与注解注入区别" class="headerlink" title="2.3.1、自动注入与注解注入区别"></a>2.3.1、自动注入与注解注入区别</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">User&#123;<br>    <span class="hljs-keyword">private</span> Car car;<br>    getCar()&#123;<br>        ...<br>    &#125;<br>    setCar(...)&#123;<br>        ...<br>    &#125;<br>&#125;<br>Car&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>1、设置了自动注入，容器中有user、car则自动设置user对象的car属性</p><p>​在xml配置文件中设置 default-autowire &#x3D; ‘byType|byName’ (通过名称或类型)</p><p>​自动注入必须有get|set方法</p><p>2、@Autowired、@Resource 依赖BeanPostProcressor实现依赖属性注入</p></blockquote><h3 id="2-3-2、ApplicationContextAwareProcessor"><a href="#2-3-2、ApplicationContextAwareProcessor" class="headerlink" title="2.3.2、ApplicationContextAwareProcessor"></a>2.3.2、ApplicationContextAwareProcessor</h3><blockquote><p>EnvironmentAware、ResourceLoaderAware、MessageSourceAware、ApplicationStartupAware</p><p>这些aware的设置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// </span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><span class="hljs-keyword">if</span> (!(bean <span class="hljs-keyword">instanceof</span> EnvironmentAware || bean <span class="hljs-keyword">instanceof</span> EmbeddedValueResolverAware ||<br>bean <span class="hljs-keyword">instanceof</span> ResourceLoaderAware || bean <span class="hljs-keyword">instanceof</span> ApplicationEventPublisherAware ||<br>bean <span class="hljs-keyword">instanceof</span> MessageSourceAware || bean <span class="hljs-keyword">instanceof</span> ApplicationContextAware ||<br>bean <span class="hljs-keyword">instanceof</span> ApplicationStartupAware)) &#123;<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br><span class="hljs-type">AccessControlContext</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-literal">null</span>) &#123;<br>acc = <span class="hljs-built_in">this</span>.applicationContext.getBeanFactory().getAccessControlContext();<br>&#125;<br><br><span class="hljs-keyword">if</span> (acc != <span class="hljs-literal">null</span>) &#123;<br>AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;<br>invokeAwareInterfaces(bean);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;, acc);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>invokeAwareInterfaces(bean);<br>&#125;<br><br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeAwareInterfaces</span><span class="hljs-params">(Object bean)</span> &#123;<br><span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> EnvironmentAware) &#123;<br>((EnvironmentAware) bean).setEnvironment(<span class="hljs-built_in">this</span>.applicationContext.getEnvironment());<br>&#125;<br><span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> EmbeddedValueResolverAware) &#123;<br>((EmbeddedValueResolverAware) bean).setEmbeddedValueResolver(<span class="hljs-built_in">this</span>.embeddedValueResolver);<br>&#125;<br><span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> ResourceLoaderAware) &#123;<br>((ResourceLoaderAware) bean).setResourceLoader(<span class="hljs-built_in">this</span>.applicationContext);<br>&#125;<br><span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> ApplicationEventPublisherAware) &#123;<br>((ApplicationEventPublisherAware) bean).setApplicationEventPublisher(<span class="hljs-built_in">this</span>.applicationContext);<br>&#125;<br><span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> MessageSourceAware) &#123;<br>((MessageSourceAware) bean).setMessageSource(<span class="hljs-built_in">this</span>.applicationContext);<br>&#125;<br><span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> ApplicationStartupAware) &#123;<br>((ApplicationStartupAware) bean).setApplicationStartup(<span class="hljs-built_in">this</span>.applicationContext.getApplicationStartup());<br>&#125;<br><span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> ApplicationContextAware) &#123;<br>((ApplicationContextAware) bean).setApplicationContext(<span class="hljs-built_in">this</span>.applicationContext);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-3、ApplicationListenerDetector"><a href="#2-3-3、ApplicationListenerDetector" class="headerlink" title="2.3.3、ApplicationListenerDetector"></a>2.3.3、ApplicationListenerDetector</h3><blockquote><p>监听器检测器类·</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessMergedBeanDefinition</span><span class="hljs-params">(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName)</span> &#123;<br><span class="hljs-keyword">if</span> (ApplicationListener.class.isAssignableFrom(beanType)) &#123;<br><span class="hljs-built_in">this</span>.singletonNames.put(beanName, beanDefinition.isSingleton());<br>&#125;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> &#123;<br><span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> ApplicationListener) &#123;<br><span class="hljs-comment">// potentially not detected as a listener by getBeanNamesForType retrieval</span><br><span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.singletonNames.get(beanName);<br><span class="hljs-keyword">if</span> (Boolean.TRUE.equals(flag)) &#123;<br><span class="hljs-comment">// singleton bean (top-level or inner): register on the fly</span><br>               <span class="hljs-comment">// 判断是否时监听器类，是的话则加入容器监听器类</span><br><span class="hljs-built_in">this</span>.applicationContext.addApplicationListener((ApplicationListener&lt;?&gt;) bean);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Boolean.FALSE.equals(flag)) &#123;<br><span class="hljs-keyword">if</span> (logger.isWarnEnabled() &amp;&amp; !<span class="hljs-built_in">this</span>.applicationContext.containsBean(beanName)) &#123;<br><span class="hljs-comment">// inner bean with other scope - can&#x27;t reliably process events</span><br>logger.warn(<span class="hljs-string">&quot;Inner bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; implements ApplicationListener interface &quot;</span> +<br><span class="hljs-string">&quot;but is not reachable for event multicasting by its containing ApplicationContext &quot;</span> +<br><span class="hljs-string">&quot;because it does not have singleton scope. Only top-level listener beans are allowed &quot;</span> +<br><span class="hljs-string">&quot;to be of non-singleton scope.&quot;</span>);<br>&#125;<br><span class="hljs-built_in">this</span>.singletonNames.remove(beanName);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br><span class="hljs-comment">// 在bean销毁时从事件分发器中移除</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeforeDestruction</span><span class="hljs-params">(Object bean, String beanName)</span> &#123;<br><span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> ApplicationListener) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ApplicationEventMulticaster</span> <span class="hljs-variable">multicaster</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationContext.getApplicationEventMulticaster();<br>multicaster.removeApplicationListener((ApplicationListener&lt;?&gt;) bean);<br>multicaster.removeApplicationListenerBean(beanName);<br>&#125;<br><span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;<br><span class="hljs-comment">// ApplicationEventMulticaster not initialized yet - no need to remove a listener</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4、postProcessBeanFactory"><a href="#2-4、postProcessBeanFactory" class="headerlink" title="2.4、postProcessBeanFactory()"></a>2.4、postProcessBeanFactory()</h2><blockquote><p> 允许在上下文子类中对bean工厂进行后处理。 </p></blockquote><h2 id="2-5、invokeBeanFactoryPostProcessors"><a href="#2-5、invokeBeanFactoryPostProcessors" class="headerlink" title="2.5、invokeBeanFactoryPostProcessors()"></a>2.5、invokeBeanFactoryPostProcessors()</h2><blockquote><p>调用BeanFactoryPostProcressor</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeBeanFactoryPostProcessors</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;<br><span class="hljs-comment">//调用执行BeanFactoryPostProcressor</span><br>        PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());<br><br><span class="hljs-comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span><br><span class="hljs-comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span><br><span class="hljs-keyword">if</span> (!NativeDetector.inNativeImage() &amp;&amp; beanFactory.getTempClassLoader() == <span class="hljs-literal">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;<br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadTimeWeaverAwareProcessor</span>(beanFactory));<br>beanFactory.setTempClassLoader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextTypeMatchClassLoader</span>(beanFactory.getBeanClassLoader()));<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeBeanFactoryPostProcessors</span><span class="hljs-params">(</span><br><span class="hljs-params">ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors)</span> &#123;<br><br><span class="hljs-comment">// WARNING: Although it may appear that the body of this method can be easily</span><br><span class="hljs-comment">// refactored to avoid the use of multiple loops and multiple lists, the use</span><br><span class="hljs-comment">// of multiple lists and multiple passes over the names of processors is</span><br><span class="hljs-comment">// intentional. We must ensure that we honor the contracts for PriorityOrdered</span><br><span class="hljs-comment">// and Ordered processors. Specifically, we must NOT cause processors to be</span><br><span class="hljs-comment">// instantiated (via getBean() invocations) or registered in the ApplicationContext</span><br><span class="hljs-comment">// in the wrong order.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Before submitting a pull request (PR) to change this method, please review the</span><br><span class="hljs-comment">// list of all declined PRs involving changes to PostProcessorRegistrationDelegate</span><br><span class="hljs-comment">// to ensure that your proposal does not result in a breaking change:</span><br><span class="hljs-comment">// https://github.com/spring-projects/spring-framework/issues?q=PostProcessorRegistrationDelegate+is%3Aclosed+label%3A%22status%3A+declined%22</span><br><br><span class="hljs-comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span><br>    <span class="hljs-comment">// 首先执行BeanDefinitionRegistryPostProcessors接口方法</span><br>    <br>    <span class="hljs-comment">//处理已经处理的bean集合，放置重复执行</span><br>Set&lt;String&gt; processedBeans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br><span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> BeanDefinitionRegistry) &#123;<br>            <span class="hljs-comment">// beanFactory实现了BeanDefinitionRegistry则转换</span><br><span class="hljs-type">BeanDefinitionRegistry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> (BeanDefinitionRegistry) beanFactory;<br><span class="hljs-comment">// 存储常规的BeanFactoryPostProcressor</span><br>            List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-comment">// 存储BeanDefinitionRegistryPostProcessor集合</span><br>List&lt;BeanDefinitionRegistryPostProcessor&gt; registryProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>            <span class="hljs-comment">//对传入的beanFactoryPostProcessors进行分类并执行BeanDefinitionRegistryPostProcessor接口方法</span><br><span class="hljs-keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;<br><span class="hljs-keyword">if</span> (postProcessor <span class="hljs-keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;<br><span class="hljs-type">BeanDefinitionRegistryPostProcessor</span> <span class="hljs-variable">registryProcessor</span> <span class="hljs-operator">=</span><br>(BeanDefinitionRegistryPostProcessor) postProcessor;<br>registryProcessor.postProcessBeanDefinitionRegistry(registry);<br>registryProcessors.add(registryProcessor);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>regularPostProcessors.add(postProcessor);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="hljs-comment">// uninitialized to let the bean factory post-processors apply to them!</span><br><span class="hljs-comment">// Separate between BeanDefinitionRegistryPostProcessors that implement</span><br><span class="hljs-comment">// PriorityOrdered, Ordered, and the rest.</span><br>            <span class="hljs-comment">// 记录此时从beanFactory获取的BeanDefinitionRegistryPostProcessor临时集合</span><br>List&lt;BeanDefinitionRegistryPostProcessor&gt; currentRegistryProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span><br>            <span class="hljs-comment">// 首先获取实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessors并实例化</span><br>String[] postProcessorNames =<br>beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">for</span> (String ppName : postProcessorNames) &#123;<br><span class="hljs-keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;<br>currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));<br>processedBeans.add(ppName);<br>&#125;<br>&#125;<br>            <span class="hljs-comment">//列表排序</span><br>sortPostProcessors(currentRegistryProcessors, beanFactory);<br>            <span class="hljs-comment">//保存至集合，等待BeanDefinitionRegistryPostProcessors方法执行完成后再次执行BeanFactoryPostProcressor接口中的方法</span><br>registryProcessors.addAll(currentRegistryProcessors);<br>            <span class="hljs-comment">//调用BeanDefinitionRegistryPostProcessors方法</span><br>invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup());<br>currentRegistryProcessors.clear();<br><br><span class="hljs-comment">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span><br>            <span class="hljs-comment">//接下来，按照上术流程、获取所有实现了Ordered接口的Registry</span><br>postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">for</span> (String ppName : postProcessorNames) &#123;<br><span class="hljs-keyword">if</span> (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;<br>currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));<br>processedBeans.add(ppName);<br>&#125;<br>&#125;<br>sortPostProcessors(currentRegistryProcessors, beanFactory);<br>registryProcessors.addAll(currentRegistryProcessors);<br>invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup());<br>currentRegistryProcessors.clear();<br><br><span class="hljs-comment">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span><br>            <span class="hljs-comment">//最后，调用所有其他BeanDefinitionRegistryPostProcessors函数，直到不再出现其他BeanDefinitionRegistryPostProcessors函数。</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">reiterate</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">while</span> (reiterate) &#123;<br>reiterate = <span class="hljs-literal">false</span>;<br>postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">for</span> (String ppName : postProcessorNames) &#123;<br><span class="hljs-keyword">if</span> (!processedBeans.contains(ppName)) &#123;<br>currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));<br>processedBeans.add(ppName);<br>reiterate = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>sortPostProcessors(currentRegistryProcessors, beanFactory);<br>registryProcessors.addAll(currentRegistryProcessors);<br>invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup());<br>currentRegistryProcessors.clear();<br>&#125;<br><br><span class="hljs-comment">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span><br>            <span class="hljs-comment">//等待registry方法执行完统一执行postProcessBeanFactory方法</span><br>invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);<br>invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);<br>&#125;<br><br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Invoke factory processors registered with the context instance.</span><br>            <span class="hljs-comment">// beanFactory 不是BeanDefinitionRegistry则执行postProcessBeanFactory方法</span><br>invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);<br>&#125;<br><br><span class="hljs-comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="hljs-comment">// uninitialized to let the bean factory post-processors apply to them!</span><br>String[] postProcessorNames =<br>beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span><br><span class="hljs-comment">// Ordered, and the rest</span><br>    <br>    <span class="hljs-comment">// 记录实现PriorityOrdered接口的BeanFactoryPostProcressor</span><br>List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 记录实现ordered接口的BeanFactoryPostProcressor</span><br>List&lt;String&gt; orderedPostProcessorNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 记录实现普通BeanFactoryPostProcressor</span><br>List&lt;String&gt; nonOrderedPostProcessorNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (String ppName : postProcessorNames) &#123;<br>            <span class="hljs-comment">// 根据bean定义分类</span><br><span class="hljs-keyword">if</span> (processedBeans.contains(ppName)) &#123;<br><span class="hljs-comment">// skip - already processed in first phase above</span><br>                <span class="hljs-comment">// 前期回调rtegistry方法时已经回调了普通BeanFactoryPostprocressor中的方法了，通过记录已执行的类，放置重复调用</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;<br>priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;<br>orderedPostProcessorNames.add(ppName);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>nonOrderedPostProcessorNames.add(ppName);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span><br>    <span class="hljs-comment">// 排序执行实现了PriorityOrdered的实例</span><br>sortPostProcessors(priorityOrderedPostProcessors, beanFactory);<br>invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);<br><br><span class="hljs-comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span><br>   <span class="hljs-comment">// 排序执行实现了Ordered的实例</span><br>List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(orderedPostProcessorNames.size());<br><span class="hljs-keyword">for</span> (String postProcessorName : orderedPostProcessorNames) &#123;<br>orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));<br>&#125;<br>sortPostProcessors(orderedPostProcessors, beanFactory);<br>invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);<br><br><span class="hljs-comment">// Finally, invoke all other BeanFactoryPostProcessors.</span><br>    <span class="hljs-comment">// 排序执行普通factoryPostProcressor实例</span><br>List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(nonOrderedPostProcessorNames.size());<br><span class="hljs-keyword">for</span> (String postProcessorName : nonOrderedPostProcessorNames) &#123;<br>nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));<br>&#125;<br>invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);<br><br><span class="hljs-comment">// Clear cached merged bean definitions since the post-processors might have</span><br><span class="hljs-comment">// modified the original metadata, e.g. replacing placeholders in values...</span><br><span class="hljs-comment">// 清理元数据缓存</span><br>    beanFactory.clearMetadataCache();<br>&#125;<br></code></pre></td></tr></table></figure><p>1.2.6、registerBeanPostProcessors()</p><blockquote><p>向容器中注册BeanPostProcressor，在实例化Bean时增强处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanPostProcessors</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;<br>PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, <span class="hljs-built_in">this</span>);<br>&#125;<br><br><span class="hljs-comment">// registerBeanPostProcessors</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanPostProcessors</span><span class="hljs-params">(</span><br><span class="hljs-params">ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext)</span> &#123;<br><br><span class="hljs-comment">// WARNING: Although it may appear that the body of this method can be easily</span><br><span class="hljs-comment">// refactored to avoid the use of multiple loops and multiple lists, the use</span><br><span class="hljs-comment">// of multiple lists and multiple passes over the names of processors is</span><br><span class="hljs-comment">// intentional. We must ensure that we honor the contracts for PriorityOrdered</span><br><span class="hljs-comment">// and Ordered processors. Specifically, we must NOT cause processors to be</span><br><span class="hljs-comment">// instantiated (via getBean() invocations) or registered in the ApplicationContext</span><br><span class="hljs-comment">// in the wrong order.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Before submitting a pull request (PR) to change this method, please review the</span><br><span class="hljs-comment">// list of all declined PRs involving changes to PostProcessorRegistrationDelegate</span><br><span class="hljs-comment">// to ensure that your proposal does not result in a breaking change:</span><br><span class="hljs-comment">// https://github.com/spring-projects/spring-framework/issues?q=PostProcessorRegistrationDelegate+is%3Aclosed+label%3A%22status%3A+declined%22</span><br><br>String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">// Register BeanPostProcessorChecker that logs an info message when</span><br><span class="hljs-comment">// a bean is created during BeanPostProcessor instantiation, i.e. when</span><br><span class="hljs-comment">// a bean is not eligible for getting processed by all BeanPostProcessors.</span><br><span class="hljs-comment">// 记录beanPostProcressor数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">beanProcessorTargetCount</span> <span class="hljs-operator">=</span> beanFactory.getBeanPostProcessorCount() + <span class="hljs-number">1</span> + postProcessorNames.length;<br>        <span class="hljs-comment">// 注册一个beanPostProcressor数量检查beanPostProcressor</span><br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPostProcessorChecker</span>(beanFactory, beanProcessorTargetCount));<br><br><span class="hljs-comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span><br><span class="hljs-comment">// Ordered, and the rest.</span><br>        <span class="hljs-comment">// 接下来的流程与BeanFactoryPostProcressor接口类似</span><br>List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//记录实现了MergedBeanDefinitionPostProcessor接口的procressor</span><br>        List&lt;BeanPostProcessor&gt; internalPostProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;String&gt; orderedPostProcessorNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;String&gt; nonOrderedPostProcessorNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (String ppName : postProcessorNames) &#123;<br><span class="hljs-keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;<br><span class="hljs-type">BeanPostProcessor</span> <span class="hljs-variable">pp</span> <span class="hljs-operator">=</span> beanFactory.getBean(ppName, BeanPostProcessor.class);<br>priorityOrderedPostProcessors.add(pp);<br><span class="hljs-keyword">if</span> (pp <span class="hljs-keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;<br>internalPostProcessors.add(pp);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;<br>orderedPostProcessorNames.add(ppName);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>nonOrderedPostProcessorNames.add(ppName);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span><br>sortPostProcessors(priorityOrderedPostProcessors, beanFactory);<br>registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);<br><br><span class="hljs-comment">// Next, register the BeanPostProcessors that implement Ordered.</span><br>List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(orderedPostProcessorNames.size());<br><span class="hljs-keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;<br><span class="hljs-type">BeanPostProcessor</span> <span class="hljs-variable">pp</span> <span class="hljs-operator">=</span> beanFactory.getBean(ppName, BeanPostProcessor.class);<br>orderedPostProcessors.add(pp);<br><span class="hljs-keyword">if</span> (pp <span class="hljs-keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;<br>internalPostProcessors.add(pp);<br>&#125;<br>&#125;<br>sortPostProcessors(orderedPostProcessors, beanFactory);<br>registerBeanPostProcessors(beanFactory, orderedPostProcessors);<br><br><span class="hljs-comment">// Now, register all regular BeanPostProcessors.</span><br>List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(nonOrderedPostProcessorNames.size());<br><span class="hljs-keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;<br><span class="hljs-type">BeanPostProcessor</span> <span class="hljs-variable">pp</span> <span class="hljs-operator">=</span> beanFactory.getBean(ppName, BeanPostProcessor.class);<br>nonOrderedPostProcessors.add(pp);<br><span class="hljs-keyword">if</span> (pp <span class="hljs-keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;<br>internalPostProcessors.add(pp);<br>&#125;<br>&#125;<br>registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);<br><br><span class="hljs-comment">// Finally, re-register all internal BeanPostProcessors.</span><br>sortPostProcessors(internalPostProcessors, beanFactory);<br>registerBeanPostProcessors(beanFactory, internalPostProcessors);<br><br><span class="hljs-comment">// Re-register post-processor for detecting inner beans as ApplicationListeners,</span><br><span class="hljs-comment">// moving it to the end of the processor chain (for picking up proxies etc).</span><br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationListenerDetector</span>(applicationContext));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6、initMessageSource"><a href="#2-6、initMessageSource" class="headerlink" title="2.6、initMessageSource()"></a>2.6、initMessageSource()</h2><blockquote><p>初始化消息源，用于处理国际化消息</p><p>不重要</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMessageSource</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> getBeanFactory();<br><span class="hljs-keyword">if</span> (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) &#123;<br>           <span class="hljs-comment">// 此时应为用户自定义了消息源</span><br><span class="hljs-built_in">this</span>.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);<br><span class="hljs-comment">// Make MessageSource aware of parent MessageSource.</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.parent != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.messageSource <span class="hljs-keyword">instanceof</span> HierarchicalMessageSource) &#123;<br>               <span class="hljs-comment">// 设置消息源的父消息源</span><br><span class="hljs-type">HierarchicalMessageSource</span> <span class="hljs-variable">hms</span> <span class="hljs-operator">=</span> (HierarchicalMessageSource) <span class="hljs-built_in">this</span>.messageSource;<br><span class="hljs-keyword">if</span> (hms.getParentMessageSource() == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Only set parent context as parent MessageSource if no parent MessageSource</span><br><span class="hljs-comment">// registered already.</span><br>hms.setParentMessageSource(getInternalParentMessageSource());<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Using MessageSource [&quot;</span> + <span class="hljs-built_in">this</span>.messageSource + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Use empty MessageSource to be able to accept getMessage calls.</span><br>           <span class="hljs-comment">// 用户未设置，则设置默认的消息源</span><br><span class="hljs-type">DelegatingMessageSource</span> <span class="hljs-variable">dms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelegatingMessageSource</span>();<br>dms.setParentMessageSource(getInternalParentMessageSource());<br><span class="hljs-built_in">this</span>.messageSource = dms;<br>beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, <span class="hljs-built_in">this</span>.messageSource);<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;No &#x27;&quot;</span> + MESSAGE_SOURCE_BEAN_NAME + <span class="hljs-string">&quot;&#x27; bean, using [&quot;</span> + <span class="hljs-built_in">this</span>.messageSource + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-7、initApplicationEventMulticaster"><a href="#2-7、initApplicationEventMulticaster" class="headerlink" title="2.7、initApplicationEventMulticaster()"></a>2.7、initApplicationEventMulticaster()</h2><blockquote><p>初始化时间分发器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initApplicationEventMulticaster</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> getBeanFactory();<br><span class="hljs-keyword">if</span> (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;<br>           <span class="hljs-comment">// 容器中已存在则设置其为分发器</span><br><span class="hljs-built_in">this</span>.applicationEventMulticaster =<br>beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Using ApplicationEventMulticaster [&quot;</span> + <span class="hljs-built_in">this</span>.applicationEventMulticaster + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 创建设置默认的事件分发器</span><br><span class="hljs-built_in">this</span>.applicationEventMulticaster = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleApplicationEventMulticaster</span>(beanFactory);<br>beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, <span class="hljs-built_in">this</span>.applicationEventMulticaster);<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;No &#x27;&quot;</span> + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + <span class="hljs-string">&quot;&#x27; bean, using &quot;</span> +<br><span class="hljs-string">&quot;[&quot;</span> + <span class="hljs-built_in">this</span>.applicationEventMulticaster.getClass().getSimpleName() + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-8、onRefresh"><a href="#2-8、onRefresh" class="headerlink" title="2.8、onRefresh()"></a>2.8、onRefresh()</h2><blockquote><p>刷新方法，有子类重写</p></blockquote><h2 id="2-9、registerListeners"><a href="#2-9、registerListeners" class="headerlink" title="2.9、registerListeners()"></a>2.9、registerListeners()</h2><blockquote><p>向事件分发器中注册监听器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerListeners</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Register statically specified listeners first.</span><br>       <span class="hljs-comment">// 获取容器中已存在的</span><br><span class="hljs-keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;<br>getApplicationEventMulticaster().addApplicationListener(listener);<br>&#125;<br><br><span class="hljs-comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="hljs-comment">// uninitialized to let post-processors apply to them!</span><br>       <span class="hljs-comment">// 获取还未实例化的监听器名称，加入分发起</span><br>String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">for</span> (String listenerBeanName : listenerBeanNames) &#123;<br>getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);<br>&#125;<br><br><span class="hljs-comment">// Publish early application events now that we finally have a multicaster...</span><br><span class="hljs-comment">// 触发早期的事件</span><br>       Set&lt;ApplicationEvent&gt; earlyEventsToProcess = <span class="hljs-built_in">this</span>.earlyApplicationEvents;<br><span class="hljs-built_in">this</span>.earlyApplicationEvents = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(earlyEventsToProcess)) &#123;<br><span class="hljs-keyword">for</span> (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123;<br>getApplicationEventMulticaster().multicastEvent(earlyEvent);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-10、finishBeanFactoryInitialization"><a href="#2-10、finishBeanFactoryInitialization" class="headerlink" title="2.10、finishBeanFactoryInitialization"></a>2.10、finishBeanFactoryInitialization</h2><blockquote><p>结束ioc初始化、初始化所有非懒加载的单实例bean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finishBeanFactoryInitialization</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;<br><span class="hljs-comment">// Initialize conversion service for this context.</span><br>       <span class="hljs-comment">// 如果有转换service则先初始化</span><br><span class="hljs-keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;<br>beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;<br>beanFactory.setConversionService(<br>beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));<br>&#125;<br><br><span class="hljs-comment">// Register a default embedded value resolver if no BeanFactoryPostProcessor</span><br><span class="hljs-comment">// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:</span><br><span class="hljs-comment">// at this point, primarily for resolution in annotation attribute values.</span><br><span class="hljs-comment">// 如果没有BeanFactoryPostProcessor，则注册一个默认的嵌入值解析器</span><br>       <span class="hljs-keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;<br>beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));<br>&#125;<br><br><span class="hljs-comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span><br>       <span class="hljs-comment">// todo 盲猜与aop有关</span><br>String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;<br>getBean(weaverAwareName);<br>&#125;<br><br><span class="hljs-comment">// Stop using the temporary ClassLoader for type matching.</span><br>       <span class="hljs-comment">// 停止使用临时ClassLoader进行类型匹配。</span><br>beanFactory.setTempClassLoader(<span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">// Allow for caching all bean definition metadata, not expecting further changes.</span><br>       <span class="hljs-comment">// 冻结bean定义</span><br>beanFactory.freezeConfiguration();<br><br><span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span><br>       <span class="hljs-comment">//开始执行加载</span><br>beanFactory.preInstantiateSingletons();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-10-1、preInstantiateSingletons"><a href="#2-10-1、preInstantiateSingletons" class="headerlink" title="2.10.1、preInstantiateSingletons()"></a>2.10.1、preInstantiateSingletons()</h3><blockquote><p>执行初始化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preInstantiateSingletons</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Pre-instantiating singletons in &quot;</span> + <span class="hljs-built_in">this</span>);<br>&#125;<br><br><span class="hljs-comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span><br><span class="hljs-comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span><br>    <span class="hljs-comment">// 记录容器中所有的bean名称</span><br>List&lt;String&gt; beanNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-built_in">this</span>.beanDefinitionNames);<br><br><span class="hljs-comment">// Trigger initialization of all non-lazy singleton beans...</span><br><span class="hljs-keyword">for</span> (String beanName : beanNames) &#123;<br><span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> getMergedLocalBeanDefinition(beanName);<br><span class="hljs-keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;<br><span class="hljs-keyword">if</span> (isFactoryBean(beanName)) &#123;<br>                    <span class="hljs-comment">// 如果bean为工厂bean，则加前缀&amp;获取工厂实例</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> getBean(FACTORY_BEAN_PREFIX + beanName);<br><span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> FactoryBean) &#123;<br>FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;<br><span class="hljs-type">boolean</span> isEagerInit;<br><span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-literal">null</span> &amp;&amp; factory <span class="hljs-keyword">instanceof</span> SmartFactoryBean) &#123;<br>isEagerInit = AccessController.doPrivileged(<br>(PrivilegedAction&lt;Boolean&gt;) ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,<br>getAccessControlContext());<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>isEagerInit = (factory <span class="hljs-keyword">instanceof</span> SmartFactoryBean &amp;&amp;<br>((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());<br>&#125;<br>                        <span class="hljs-comment">// 判断是否需要在容器启动实例化SmartFactoryBean.isEagerInit()</span><br>                        <span class="hljs-comment">// 默认false</span><br><span class="hljs-keyword">if</span> (isEagerInit) &#123;<br>getBean(beanName);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 根据bean名称获取bean实例、获取就是</span><br>getBean(beanName);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Trigger post-initialization callback for all applicable beans...</span><br>    <span class="hljs-comment">// bean实例化完成后回调SmartInitializingSingleton接口方法</span><br><span class="hljs-keyword">for</span> (String beanName : beanNames) &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">singletonInstance</span> <span class="hljs-operator">=</span> getSingleton(beanName);<br><span class="hljs-keyword">if</span> (singletonInstance <span class="hljs-keyword">instanceof</span> SmartInitializingSingleton) &#123;<br><span class="hljs-type">SmartInitializingSingleton</span> <span class="hljs-variable">smartSingleton</span> <span class="hljs-operator">=</span> (SmartInitializingSingleton) singletonInstance;<br><span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-literal">null</span>) &#123;<br>AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;<br>smartSingleton.afterSingletonsInstantiated();<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;, getAccessControlContext());<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>smartSingleton.afterSingletonsInstantiated();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-10-2、getBean-gt-doGetBean"><a href="#2-10-2、getBean-gt-doGetBean" class="headerlink" title="2.10.2、getBean()-&gt;doGetBean()"></a>2.10.2、getBean()-&gt;doGetBean()</h3><blockquote><p>获取bean实际方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> &lt;T&gt; T <span class="hljs-title function_">doGetBean</span><span class="hljs-params">(</span><br><span class="hljs-params">String name, <span class="hljs-meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="hljs-meta">@Nullable</span> Object[] args, <span class="hljs-type">boolean</span> typeCheckOnly)</span><br><span class="hljs-keyword">throws</span> BeansException &#123;<br><br>    <span class="hljs-comment">// 格式化bean名称，去除name的&amp;如果有的话，将别名转换为规范名称</span><br><span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> transformedBeanName(name);<br>Object bean;<br><br><span class="hljs-comment">// Eagerly check singleton cache for manually registered singletons.</span><br>    <span class="hljs-comment">// 从缓存中获取实例bean、同时处理了循环依赖问题</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">sharedInstance</span> <span class="hljs-operator">=</span> getSingleton(beanName);<br><span class="hljs-keyword">if</span> (sharedInstance != <span class="hljs-literal">null</span> &amp;&amp; args == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br><span class="hljs-keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;<br>logger.trace(<span class="hljs-string">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +<br><span class="hljs-string">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>logger.trace(<span class="hljs-string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>&#125;<br>            <span class="hljs-comment">// 处理beanFactroy获取bean的问题</span><br>bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Fail if we&#x27;re already creating this bean instance:</span><br><span class="hljs-comment">// We&#x27;re assumably within a circular reference.</span><br>            <span class="hljs-comment">// 检查bean是否正在创建中</span><br><span class="hljs-keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCurrentlyInCreationException</span>(beanName);<br>&#125;<br><br><span class="hljs-comment">// Check if bean definition exists in this factory.</span><br>            <span class="hljs-comment">// 如果父beanFactrou不为空且该bean定义不在此factory中存在，则请求父类创建</span><br><span class="hljs-type">BeanFactory</span> <span class="hljs-variable">parentBeanFactory</span> <span class="hljs-operator">=</span> getParentBeanFactory();<br><span class="hljs-keyword">if</span> (parentBeanFactory != <span class="hljs-literal">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;<br><span class="hljs-comment">// Not found -&gt; check parent.</span><br>                <span class="hljs-comment">// bean名称格式化</span><br><span class="hljs-type">String</span> <span class="hljs-variable">nameToLookup</span> <span class="hljs-operator">=</span> originalBeanName(name);<br><span class="hljs-keyword">if</span> (parentBeanFactory <span class="hljs-keyword">instanceof</span> AbstractBeanFactory) &#123;<br><span class="hljs-keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(<br>nameToLookup, requiredType, args, typeCheckOnly);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (args != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Delegation to parent with explicit args.</span><br><span class="hljs-keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (requiredType != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// No args -&gt; delegate to standard getBean method.</span><br><span class="hljs-keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!typeCheckOnly) &#123;<br>                <span class="hljs-comment">// 标识bean在创建中</span><br>markBeanAsCreated(beanName);<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 获取bean定义同时检查bean是否为抽象类</span><br><span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">mbd</span> <span class="hljs-operator">=</span> getMergedLocalBeanDefinition(beanName);<br>checkMergedBeanDefinition(mbd, beanName, args);<br><br><span class="hljs-comment">// Guarantee initialization of beans that the current bean depends on.</span><br>                <span class="hljs-comment">// 首先初始化bean依赖的bean(depend-on)</span><br>String[] dependsOn = mbd.getDependsOn();<br><span class="hljs-keyword">if</span> (dependsOn != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (String dep : dependsOn) &#123;<br>                        <span class="hljs-comment">// 检查是否循环depend-on</span><br><span class="hljs-keyword">if</span> (isDependent(beanName, dep)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,<br><span class="hljs-string">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>                        <span class="hljs-comment">// 注册依赖信息</span><br>registerDependentBean(dep, beanName);<br><span class="hljs-keyword">try</span> &#123;<br>getBean(dep);<br>&#125;<br><span class="hljs-keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,<br><span class="hljs-string">&quot;&#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; depends on missing bean &#x27;&quot;</span> + dep + <span class="hljs-string">&quot;&#x27;&quot;</span>, ex);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Create bean instance.</span><br>                <span class="hljs-comment">// 创建单实例bean</span><br><span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>sharedInstance = getSingleton(beanName, () -&gt; &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">return</span> createBean(beanName, mbd, args);<br>&#125;<br><span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br><span class="hljs-comment">// Explicitly remove instance from singleton cache: It might have been put there</span><br><span class="hljs-comment">// eagerly by the creation process, to allow for circular reference resolution.</span><br><span class="hljs-comment">// Also remove any beans that received a temporary reference to the bean.</span><br>destroySingleton(beanName);<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br>&#125;);<br>bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);<br>&#125;<br><br>                <span class="hljs-comment">// 创建多实例bean</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mbd.isPrototype()) &#123;<br><span class="hljs-comment">// It&#x27;s a prototype -&gt; create a new instance.</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">prototypeInstance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>beforePrototypeCreation(beanName);<br>prototypeInstance = createBean(beanName, mbd, args);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>afterPrototypeCreation(beanName);<br>&#125;<br>bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);<br>&#125;<br><br><span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 获取bean的作用域并创建</span><br><span class="hljs-type">String</span> <span class="hljs-variable">scopeName</span> <span class="hljs-operator">=</span> mbd.getScope();<br><span class="hljs-keyword">if</span> (!StringUtils.hasLength(scopeName)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;No scope name defined for bean ´&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br><span class="hljs-type">Scope</span> <span class="hljs-variable">scope</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.scopes.get(scopeName);<br><span class="hljs-keyword">if</span> (scope == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;No Scope registered for scope name &#x27;&quot;</span> + scopeName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">scopedInstance</span> <span class="hljs-operator">=</span> scope.get(beanName, () -&gt; &#123;<br>beforePrototypeCreation(beanName);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">return</span> createBean(beanName, mbd, args);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>afterPrototypeCreation(beanName);<br>&#125;<br>&#125;);<br>bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);<br>&#125;<br><span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(beanName,<br><span class="hljs-string">&quot;Scope &#x27;&quot;</span> + scopeName + <span class="hljs-string">&quot;&#x27; is not active for the current thread; consider &quot;</span> +<br><span class="hljs-string">&quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;</span>,<br>ex);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>cleanupAfterBeanCreationFailure(beanName);<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Check if required type matches the type of the actual bean instance.</span><br>    <span class="hljs-comment">// 检查bean的类型</span><br><span class="hljs-keyword">if</span> (requiredType != <span class="hljs-literal">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 类型不符合则转换(子类转父类)</span><br><span class="hljs-type">T</span> <span class="hljs-variable">convertedBean</span> <span class="hljs-operator">=</span> getTypeConverter().convertIfNecessary(bean, requiredType);<br><span class="hljs-keyword">if</span> (convertedBean == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanNotOfRequiredTypeException</span>(name, requiredType, bean.getClass());<br>&#125;<br><span class="hljs-keyword">return</span> convertedBean;<br>&#125;<br><span class="hljs-keyword">catch</span> (TypeMismatchException ex) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Failed to convert bean &#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27; to required type &#x27;&quot;</span> +<br>ClassUtils.getQualifiedName(requiredType) + <span class="hljs-string">&quot;&#x27;&quot;</span>, ex);<br>&#125;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanNotOfRequiredTypeException</span>(name, requiredType, bean.getClass());<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> (T) bean;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-10-2-1、getSingleton"><a href="#2-10-2-1、getSingleton" class="headerlink" title="2.10.2.1、getSingleton()"></a>2.10.2.1、getSingleton()</h4><blockquote><p>从缓存中获取单实例bean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">getSingleton</span><span class="hljs-params">(String beanName, <span class="hljs-type">boolean</span> allowEarlyReference)</span> &#123;<br><span class="hljs-comment">// Quick check for existing instance without full singleton lock</span><br>       <span class="hljs-comment">// 从单实例缓存中获取bean，后续但是里创建后都会保存在这个map中</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">singletonObject</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br><span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;<br>singletonObject = <span class="hljs-built_in">this</span>.earlySingletonObjects.get(beanName);<br><span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span> &amp;&amp; allowEarlyReference) &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.singletonObjects) &#123;<br><span class="hljs-comment">// Consistent creation of early reference within full singleton lock</span><br>singletonObject = <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br><span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span>) &#123;<br>singletonObject = <span class="hljs-built_in">this</span>.earlySingletonObjects.get(beanName);<br><span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span>) &#123;<br>ObjectFactory&lt;?&gt; singletonFactory = <span class="hljs-built_in">this</span>.singletonFactories.get(beanName);<br><span class="hljs-keyword">if</span> (singletonFactory != <span class="hljs-literal">null</span>) &#123;<br>singletonObject = singletonFactory.getObject();<br><span class="hljs-built_in">this</span>.earlySingletonObjects.put(beanName, singletonObject);<br><span class="hljs-built_in">this</span>.singletonFactories.remove(beanName);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> singletonObject;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-10-2-2、getObjectForBeanInstance"><a href="#2-10-2-2、getObjectForBeanInstance" class="headerlink" title="2.10.2.2、getObjectForBeanInstance()"></a>2.10.2.2、getObjectForBeanInstance()</h4><blockquote><p> 获取给定bean实例的对象，对于FactoryBean，可以是bean实例本身，也可以是它创建的对象。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">getObjectForBeanInstance</span><span class="hljs-params">(</span><br><span class="hljs-params">Object beanInstance, String name, String beanName, <span class="hljs-meta">@Nullable</span> RootBeanDefinition mbd)</span> &#123;<br><br><span class="hljs-comment">// Don&#x27;t let calling code try to dereference the factory if the bean isn&#x27;t a factory.</span><br>       <span class="hljs-comment">//如果bean不是工厂，不要让调用代码尝试解除对工厂的引用。</span><br><span class="hljs-keyword">if</span> (BeanFactoryUtils.isFactoryDereference(name)) &#123;<br><span class="hljs-keyword">if</span> (beanInstance <span class="hljs-keyword">instanceof</span> NullBean) &#123;<br><span class="hljs-keyword">return</span> beanInstance;<br>&#125;<br><span class="hljs-keyword">if</span> (!(beanInstance <span class="hljs-keyword">instanceof</span> FactoryBean)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanIsNotAFactoryException</span>(beanName, beanInstance.getClass());<br>&#125;<br><span class="hljs-keyword">if</span> (mbd != <span class="hljs-literal">null</span>) &#123;<br>mbd.isFactoryBean = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> beanInstance;<br>&#125;<br><br><span class="hljs-comment">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span><br><span class="hljs-comment">// If it&#x27;s a FactoryBean, we use it to create a bean instance, unless the</span><br><span class="hljs-comment">// caller actually wants a reference to the factory.</span><br>       <span class="hljs-comment">// 不是工厂实例，直接返回</span><br><span class="hljs-keyword">if</span> (!(beanInstance <span class="hljs-keyword">instanceof</span> FactoryBean)) &#123;<br><span class="hljs-keyword">return</span> beanInstance;<br>&#125;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (mbd != <span class="hljs-literal">null</span>) &#123;<br>mbd.isFactoryBean = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-comment">// 先从缓存中获取</span><br>object = getCachedObjectForFactoryBean(beanName);<br>&#125;<br>       <span class="hljs-comment">//缓存中不存在则调用工厂方法创建类</span><br><span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Return bean instance from factory.</span><br>FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;<br><span class="hljs-comment">// Caches object obtained from FactoryBean if it is a singleton.</span><br><span class="hljs-keyword">if</span> (mbd == <span class="hljs-literal">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;<br>mbd = getMergedLocalBeanDefinition(beanName);<br>&#125;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">synthetic</span> <span class="hljs-operator">=</span> (mbd != <span class="hljs-literal">null</span> &amp;&amp; mbd.isSynthetic());<br>object = getObjectFromFactoryBean(factory, beanName, !synthetic);<br>&#125;<br><span class="hljs-keyword">return</span> object;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-10-2-3、getSingleton"><a href="#2-10-2-3、getSingleton" class="headerlink" title="2.10.2.3、getSingleton()"></a>2.10.2.3、getSingleton()</h4><blockquote><p>获取单实例bean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getSingleton</span><span class="hljs-params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> &#123;<br>Assert.notNull(beanName, <span class="hljs-string">&quot;Bean name must not be null&quot;</span>);<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.singletonObjects) &#123;<br>            <span class="hljs-comment">// 首先从缓存中获取bean</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">singletonObject</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br><span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 未获取到则检查bean是否在销毁中</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.singletonsCurrentlyInDestruction) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationNotAllowedException</span>(beanName,<br><span class="hljs-string">&quot;Singleton bean creation not allowed while singletons of this factory are in destruction &quot;</span> +<br><span class="hljs-string">&quot;(Do not request a bean from a BeanFactory in a destroy method implementation!)&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Creating shared instance of singleton bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>                <span class="hljs-comment">// 将当前创建的bean名称保存在创建中缓存</span><br>beforeSingletonCreation(beanName);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">newSingleton</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">recordSuppressedExceptions</span> <span class="hljs-operator">=</span> (<span class="hljs-built_in">this</span>.suppressedExceptions == <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">if</span> (recordSuppressedExceptions) &#123;<br><span class="hljs-built_in">this</span>.suppressedExceptions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 创建bean</span><br>singletonObject = singletonFactory.getObject();<br>newSingleton = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;<br><span class="hljs-comment">// Has the singleton object implicitly appeared in the meantime -&gt;</span><br><span class="hljs-comment">// if yes, proceed with it since the exception indicates that state.</span><br>singletonObject = <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br><span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (BeanCreationException ex) &#123;<br><span class="hljs-keyword">if</span> (recordSuppressedExceptions) &#123;<br><span class="hljs-keyword">for</span> (Exception suppressedException : <span class="hljs-built_in">this</span>.suppressedExceptions) &#123;<br>ex.addRelatedCause(suppressedException);<br>&#125;<br>&#125;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (recordSuppressedExceptions) &#123;<br><span class="hljs-built_in">this</span>.suppressedExceptions = <span class="hljs-literal">null</span>;<br>&#125;<br>                    <span class="hljs-comment">// 将bean名称从创建中缓存移除</span><br>afterSingletonCreation(beanName);<br>&#125;<br><span class="hljs-keyword">if</span> (newSingleton) &#123;<br>                    <span class="hljs-comment">// 加入单实例bean对象缓存</span><br>addSingleton(beanName, singletonObject);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> singletonObject;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.10.2.4、createBean()</p><blockquote><p>创建bean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">createBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> Object[] args)</span><br><span class="hljs-keyword">throws</span> BeanCreationException &#123;<br><br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Creating instance of bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br><span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">mbdToUse</span> <span class="hljs-operator">=</span> mbd;<br><br><span class="hljs-comment">// Make sure bean class is actually resolved at this point, and</span><br><span class="hljs-comment">// clone the bean definition in case of a dynamically resolved Class</span><br><span class="hljs-comment">// which cannot be stored in the shared merged bean definition.</span><br>       <span class="hljs-comment">// 获取设置bean的类型</span><br>Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);<br><span class="hljs-keyword">if</span> (resolvedClass != <span class="hljs-literal">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="hljs-literal">null</span>) &#123;<br>mbdToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(mbd);<br>mbdToUse.setBeanClass(resolvedClass);<br>&#125;<br><br><span class="hljs-comment">// Prepare method overrides.</span><br><span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">// 准备方法重写look-up, method-replace</span><br>mbdToUse.prepareMethodOverrides();<br>&#125;<br><span class="hljs-keyword">catch</span> (BeanDefinitionValidationException ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionStoreException</span>(mbdToUse.getResourceDescription(),<br>beanName, <span class="hljs-string">&quot;Validation of method overrides failed&quot;</span>, ex);<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span><br>           <span class="hljs-comment">// 调用InstantiationAwareBeanPostProcessor的实例化回调</span><br>           <span class="hljs-comment">// 1、postProcessBeforeInstantiation</span><br>           <span class="hljs-comment">// 2、postProcessAfterInitialization</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> resolveBeforeInstantiation(beanName, mbdToUse);<br><span class="hljs-keyword">if</span> (bean != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-comment">// 如果回调方法返回了bean则直接返回</span><br><span class="hljs-keyword">return</span> bean;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbdToUse.getResourceDescription(), beanName,<br><span class="hljs-string">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, ex);<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">// 创建bean实例</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">beanInstance</span> <span class="hljs-operator">=</span> doCreateBean(beanName, mbdToUse, args);<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> beanInstance;<br>&#125;<br><span class="hljs-keyword">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;<br><span class="hljs-comment">// A previously detected exception with proper bean creation context already,</span><br><span class="hljs-comment">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span><br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(<br>mbdToUse.getResourceDescription(), beanName, <span class="hljs-string">&quot;Unexpected exception during bean creation&quot;</span>, ex);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-10-2-3-1、doCreateBean"><a href="#2-10-2-3-1、doCreateBean" class="headerlink" title="2.10.2.3.1、doCreateBean()"></a>2.10.2.3.1、doCreateBean()</h5><blockquote><p>执行创建bean实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">doCreateBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> Object[] args)</span><br><span class="hljs-keyword">throws</span> BeanCreationException &#123;<br><br><span class="hljs-comment">// Instantiate the bean.</span><br><span class="hljs-type">BeanWrapper</span> <span class="hljs-variable">instanceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>           <span class="hljs-comment">// 从factoryBeanInstanceCache缓存中移除该bean</span><br>instanceWrapper = <span class="hljs-built_in">this</span>.factoryBeanInstanceCache.remove(beanName);<br>&#125;<br><span class="hljs-keyword">if</span> (instanceWrapper == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-comment">// 创建bean实例</span><br>instanceWrapper = createBeanInstance(beanName, mbd, args);<br>&#125;<br><span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> instanceWrapper.getWrappedInstance();<br>Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();<br><span class="hljs-keyword">if</span> (beanType != NullBean.class) &#123;<br>mbd.resolvedTargetType = beanType;<br>&#125;<br><br><span class="hljs-comment">// Allow post-processors to modify the merged bean definition.</span><br><span class="hljs-keyword">synchronized</span> (mbd.postProcessingLock) &#123;<br><span class="hljs-keyword">if</span> (!mbd.postProcessed) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>                   <span class="hljs-comment">// 执行MergedBeanDefinitionPostProcessor接口的postProcessMergedBeanDefinition回调</span><br>applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,<br><span class="hljs-string">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);<br>&#125;<br>mbd.postProcessed = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Eagerly cache singletons to be able to resolve circular references</span><br><span class="hljs-comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span><br>       <span class="hljs-comment">//快速缓存单例以解析循环引用,即使被BeanFactoryAware等生命周期接口触发。</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">earlySingletonExposure</span> <span class="hljs-operator">=</span> (mbd.isSingleton() &amp;&amp; <span class="hljs-built_in">this</span>.allowCircularReferences &amp;&amp;<br>isSingletonCurrentlyInCreation(beanName));<br><span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +<br><span class="hljs-string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);<br>&#125;<br>addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));<br>&#125;<br><br><span class="hljs-comment">// Initialize the bean instance.</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">exposedObject</span> <span class="hljs-operator">=</span> bean;<br><span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">// bean属性填充</span><br>populateBean(beanName, mbd, instanceWrapper);<br>           <span class="hljs-comment">// 执行生命周期的初始化方法</span><br>exposedObject = initializeBean(beanName, exposedObject, mbd);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br><span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;<br><span class="hljs-keyword">throw</span> (BeanCreationException) ex;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(<br>mbd.getResourceDescription(), beanName, <span class="hljs-string">&quot;Initialization of bean failed&quot;</span>, ex);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">earlySingletonReference</span> <span class="hljs-operator">=</span> getSingleton(beanName, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span> (earlySingletonReference != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (exposedObject == bean) &#123;<br>exposedObject = earlySingletonReference;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;<br>String[] dependentBeans = getDependentBeans(beanName);<br>Set&lt;String&gt; actualDependentBeans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(dependentBeans.length);<br><span class="hljs-keyword">for</span> (String dependentBean : dependentBeans) &#123;<br><span class="hljs-keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;<br>actualDependentBeans.add(dependentBean);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCurrentlyInCreationException</span>(beanName,<br><span class="hljs-string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; has been injected into other beans [&quot;</span> +<br>StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +<br><span class="hljs-string">&quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span> +<br><span class="hljs-string">&quot;wrapped. This means that said other beans do not use the final version of the &quot;</span> +<br><span class="hljs-string">&quot;bean. This is often the result of over-eager type matching - consider using &quot;</span> +<br><span class="hljs-string">&quot;&#x27;getBeanNamesForType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Register bean as disposable.</span><br><span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">// 注册销毁方法</span><br>registerDisposableBeanIfNecessary(beanName, bean, mbd);<br>&#125;<br><span class="hljs-keyword">catch</span> (BeanDefinitionValidationException ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(<br>mbd.getResourceDescription(), beanName, <span class="hljs-string">&quot;Invalid destruction signature&quot;</span>, ex);<br>&#125;<br><br><span class="hljs-keyword">return</span> exposedObject;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-10-2-3-1-1、populateBean"><a href="#2-10-2-3-1-1、populateBean" class="headerlink" title="2.10.2.3.1.1、populateBean()"></a>2.10.2.3.1.1、populateBean()</h6><blockquote><p>填充bean属性、自动注入等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">populateBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> BeanWrapper bw)</span> &#123;<br><span class="hljs-keyword">if</span> (bw == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (mbd.hasPropertyValues()) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(<br>mbd.getResourceDescription(), beanName, <span class="hljs-string">&quot;Cannot apply property values to null instance&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Skip property population phase for null instance.</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span><br><span class="hljs-comment">// state of the bean before properties are set. This can be used, for example,</span><br><span class="hljs-comment">// to support styles of field injection.</span><br><span class="hljs-comment">// 执行InstantiationAwareBeanPostProcessor回调postProcessAfterInstantiation</span><br><span class="hljs-keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;<br><span class="hljs-keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;<br><span class="hljs-keyword">if</span> (bp <span class="hljs-keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;<br><span class="hljs-type">InstantiationAwareBeanPostProcessor</span> <span class="hljs-variable">ibp</span> <span class="hljs-operator">=</span> (InstantiationAwareBeanPostProcessor) bp;<br><span class="hljs-keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">PropertyValues</span> <span class="hljs-variable">pvs</span> <span class="hljs-operator">=</span> (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="hljs-literal">null</span>);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">resolvedAutowireMode</span> <span class="hljs-operator">=</span> mbd.getResolvedAutowireMode();<br>    <span class="hljs-comment">// 属性自动注入defautl-autiwre=’byName|byType‘</span><br><span class="hljs-keyword">if</span> (resolvedAutowireMode == AUTOWIRE_BY_NAME || resolvedAutowireMode == AUTOWIRE_BY_TYPE) &#123;<br><span class="hljs-type">MutablePropertyValues</span> <span class="hljs-variable">newPvs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutablePropertyValues</span>(pvs);<br><span class="hljs-comment">// Add property values based on autowire by name if applicable.</span><br><span class="hljs-keyword">if</span> (resolvedAutowireMode == AUTOWIRE_BY_NAME) &#123;<br>autowireByName(beanName, mbd, bw, newPvs);<br>&#125;<br><span class="hljs-comment">// Add property values based on autowire by type if applicable.</span><br><span class="hljs-keyword">if</span> (resolvedAutowireMode == AUTOWIRE_BY_TYPE) &#123;<br>autowireByType(beanName, mbd, bw, newPvs);<br>&#125;<br>pvs = newPvs;<br>&#125;<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">hasInstAwareBpps</span> <span class="hljs-operator">=</span> hasInstantiationAwareBeanPostProcessors();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">needsDepCheck</span> <span class="hljs-operator">=</span> (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);<br><br>PropertyDescriptor[] filteredPds = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 执行InstantiationAwareBeanPostProcessor回调</span><br><span class="hljs-keyword">if</span> (hasInstAwareBpps) &#123;<br><span class="hljs-keyword">if</span> (pvs == <span class="hljs-literal">null</span>) &#123;<br>pvs = mbd.getPropertyValues();<br>&#125;<br><span class="hljs-keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;<br><span class="hljs-keyword">if</span> (bp <span class="hljs-keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;<br><span class="hljs-type">InstantiationAwareBeanPostProcessor</span> <span class="hljs-variable">ibp</span> <span class="hljs-operator">=</span> (InstantiationAwareBeanPostProcessor) bp;<br><span class="hljs-type">PropertyValues</span> <span class="hljs-variable">pvsToUse</span> <span class="hljs-operator">=</span> ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);<br><span class="hljs-keyword">if</span> (pvsToUse == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (filteredPds == <span class="hljs-literal">null</span>) &#123;<br>filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);<br>&#125;<br>pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);<br><span class="hljs-keyword">if</span> (pvsToUse == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>pvs = pvsToUse;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (needsDepCheck) &#123;<br><span class="hljs-keyword">if</span> (filteredPds == <span class="hljs-literal">null</span>) &#123;<br>filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);<br>&#125;<br>checkDependencies(beanName, mbd, filteredPds, pvs);<br>&#125;<br><br><span class="hljs-keyword">if</span> (pvs != <span class="hljs-literal">null</span>) &#123;<br>applyPropertyValues(beanName, mbd, bw, pvs);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-10-2-3-1-2、initializeBean"><a href="#2-10-2-3-1-2、initializeBean" class="headerlink" title="2.10.2.3.1.2、initializeBean()"></a>2.10.2.3.1.2、initializeBean()</h6><blockquote><p>初始化方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">initializeBean</span><span class="hljs-params">(String beanName, Object bean, <span class="hljs-meta">@Nullable</span> RootBeanDefinition mbd)</span> &#123;<br>       <span class="hljs-comment">//执行BeanNameAware、BeanClassLoaderAware、BeanClassLoaderAware</span><br><span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-literal">null</span>) &#123;<br>AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;<br>invokeAwareMethods(beanName, bean);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;, getAccessControlContext());<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>invokeAwareMethods(beanName, bean);<br>&#125;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">wrappedBean</span> <span class="hljs-operator">=</span> bean;<br>       <span class="hljs-comment">// 执行BeanPostProcessor的postProcessBeforeInitialization回调</span><br><span class="hljs-keyword">if</span> (mbd == <span class="hljs-literal">null</span> || !mbd.isSynthetic()) &#123;<br>wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">// 执行初始化方法</span><br>           <span class="hljs-comment">// InitializingBean的afterPropertiesSet</span><br>           <span class="hljs-comment">// 执行bean定义指定的init方法</span><br>invokeInitMethods(beanName, wrappedBean, mbd);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(<br>(mbd != <span class="hljs-literal">null</span> ? mbd.getResourceDescription() : <span class="hljs-literal">null</span>),<br>beanName, <span class="hljs-string">&quot;Invocation of init method failed&quot;</span>, ex);<br>&#125;<br><span class="hljs-keyword">if</span> (mbd == <span class="hljs-literal">null</span> || !mbd.isSynthetic()) &#123;<br>           <span class="hljs-comment">// 执行BeanPostProcessor的postProcessAfterInitialization回调</span><br>wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);<br>&#125;<br><br><span class="hljs-keyword">return</span> wrappedBean;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、记录"><a href="#3、记录" class="headerlink" title="3、记录"></a>3、记录</h1><h2 id="1、2022-08-14"><a href="#1、2022-08-14" class="headerlink" title="1、2022-08-14"></a>1、2022-08-14</h2><blockquote><p>初步了解了spring ioc的大概流程，还有许多核心方法用途暂时还没有确定，后续更新！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
